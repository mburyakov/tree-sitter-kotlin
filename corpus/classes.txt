==================
Classes
==================
class Empty
class Empty2 {}
---

(source_file
  (class_declaration
    (CLASS)
    (WS)
    (type_identifier
      (Identifier)))
  (semis
    (NLS))
  (class_declaration
    (CLASS)
    (WS)
    (type_identifier
      (Identifier))
    (WS)
    (class_body
      (LCURL)
      (RCURL))))

==================
Class with methods
==================
class HelloWorld {
	fun a() {}

	fun b() {}
}
---

(source_file
  (class_declaration
    (CLASS)
    (WS)
    (type_identifier
      (Identifier))
    (WS)
    (class_body
      (LCURL)
      (NLS)
      (WS)
      (function_declaration
        (WS)
        (simpleIdentifier
          (Identifier))
        (WS)
        (function_body
          (block
            (LCURL)
            (RCURL))))
      (semis
        (NLS))
      (WS)
      (function_declaration
        (WS)
        (simpleIdentifier
          (Identifier))
        (WS)
        (function_body
          (block
            (LCURL)
            (RCURL))))
      (semis
        (NLS))
      (RCURL))))

==================
Generic class
==================
class Container<T> {}
---

(source_file
  (class_declaration
    (CLASS)
    (WS)
    (type_identifier
      (Identifier))
    (type_parameters
      (LANGLE)
      (type_parameter
        (type_identifier
          (Identifier)))
      (RANGLE))
    (WS)
    (class_body
      (LCURL)
      (RCURL))))

==================
Class with methods and expressions
==================
class Strings {
	fun aString() = "Hello World!"

	fun anotherString() = "Hello" + " " + "World"
}
---

(source_file
  (class_declaration
    (CLASS)
    (WS)
    (type_identifier
      (Identifier))
    (WS)
    (class_body
      (LCURL)
      (NLS)
      (WS)
      (function_declaration
        (WS)
        (simpleIdentifier
          (Identifier))
        (WS)
        (function_body
          (WS)
          (expression
            (disjunction
              (conjunction
                (equality
                  (comparison
                    (infixOperation
                      (elvisExpression
                        (infixFunctionCall
                          (rangeExpression
                            (additiveExpression
                              (multiplicativeExpression
                                (asExpression
                                  (prefixUnaryExpression
                                    (postfixUnaryExpression
                                      (primaryExpression
                                        (stringLiteral
                                          (lineStringLiteral
                                            (lineStringContent
                                              (LineStrText)))))))))))))))))))))
      (semis
        (NLS))
      (WS)
      (function_declaration
        (WS)
        (simpleIdentifier
          (Identifier))
        (WS)
        (function_body
          (WS)
          (expression
            (disjunction
              (conjunction
                (equality
                  (comparison
                    (infixOperation
                      (elvisExpression
                        (infixFunctionCall
                          (rangeExpression
                            (additiveExpression
                              (additiveExpression
                                (additiveExpression
                                  (multiplicativeExpression
                                    (asExpression
                                      (prefixUnaryExpression
                                        (postfixUnaryExpression
                                          (primaryExpression
                                            (stringLiteral
                                              (lineStringLiteral
                                                (lineStringContent
                                                  (LineStrText))))))))))
                                (WS)
                                (additiveOperator
                                  (ADD))
                                (WS)
                                (multiplicativeExpression
                                  (asExpression
                                    (prefixUnaryExpression
                                      (postfixUnaryExpression
                                        (primaryExpression
                                          (stringLiteral
                                            (lineStringLiteral
                                              (lineStringContent
                                                (LineStrText))))))))))
                              (WS)
                              (additiveOperator
                                (ADD))
                              (WS)
                              (multiplicativeExpression
                                (asExpression
                                  (prefixUnaryExpression
                                    (postfixUnaryExpression
                                      (primaryExpression
                                        (stringLiteral
                                          (lineStringLiteral
                                            (lineStringContent
                                              (LineStrText)))))))))))))))))))))
      (semis
        (NLS))
      (RCURL))))

==================
Class with modifiers
==================
internal open class Test {
	private abstract inline fun test()
}
---

(source_file
  (class_declaration
    (modifiers
      (visibility_modifier
        (INTERNAL))
      (WS)
      (inheritance_modifier
        (OPEN)))
    (WS)
    (CLASS)
    (WS)
    (type_identifier
      (Identifier))
    (WS)
    (class_body
      (LCURL)
      (NLS)
      (WS)
      (function_declaration
        (modifiers
          (visibility_modifier
            (PRIVATE))
          (WS)
          (inheritance_modifier
            (ABSTRACT))
          (WS)
          (function_modifier
            (INLINE)))
        (WS)
        (WS)
        (simpleIdentifier
          (Identifier)))
      (semis
        (NLS))
      (RCURL))))

==================
Enum class with modifiers in non-standard order
==================
enum public class E
---

(source_file
  (class_declaration
    (modifiers
      (class_modifier
        (ENUM))
      (WS)
      (visibility_modifier
        (PUBLIC)))
    (WS)
    (CLASS)
    (WS)
    (type_identifier
      (Identifier))))

==================
Objects
==================
object Singleton {
	fun test()
}
---

(source_file
  (object_declaration
    (WS)
    (type_identifier
      (Identifier))
    (WS)
    (class_body
      (LCURL)
      (NLS)
      (WS)
      (function_declaration
        (WS)
        (simpleIdentifier
          (Identifier)))
      (semis
        (NLS))
      (RCURL))))

==================
Primary constructors
==================
data class Vector2D(
	val x: Int,
	val y: Int
)
---

(source_file
  (class_declaration
    (modifiers
      (class_modifier
        (DATA)))
    (WS)
    (CLASS)
    (WS)
    (type_identifier
      (Identifier))
    (primary_constructor
      (LPAREN)
      (NLS)
      (WS)
      (class_parameter
        (WS)
        (simpleIdentifier
          (Identifier))
        (WS)
        (type
          (typeReference
            (userType
              (simpleUserType
                (type_identifier
                  (Identifier)))))))
      (NLS)
      (WS)
      (class_parameter
        (WS)
        (simpleIdentifier
          (Identifier))
        (WS)
        (type
          (typeReference
            (userType
              (simpleUserType
                (type_identifier
                  (Identifier)))))))
      (NLS)
      (RPAREN))))

==================
Inheritance
==================
class A : B() {}

class C(param: Int) : D(param)

class D : SomeInterface
---

(source_file
  (class_declaration
    (CLASS)
    (WS)
    (type_identifier
      (Identifier))
    (WS)
    (COLON)
    (WS)
    (delegation_specifier
      (constructor_invocation
        (userType
          (simpleUserType
            (type_identifier
              (Identifier))))
        (valueArguments
          (LPAREN)
          (RPAREN))))
    (WS)
    (class_body
      (LCURL)
      (RCURL)))
  (semis
    (NLS))
  (class_declaration
    (CLASS)
    (WS)
    (type_identifier
      (Identifier))
    (primary_constructor
      (LPAREN)
      (class_parameter
        (simpleIdentifier
          (PARAM))
        (WS)
        (type
          (typeReference
            (userType
              (simpleUserType
                (type_identifier
                  (Identifier)))))))
      (RPAREN))
    (WS)
    (COLON)
    (WS)
    (delegation_specifier
      (constructor_invocation
        (userType
          (simpleUserType
            (type_identifier
              (Identifier))))
        (valueArguments
          (LPAREN)
          (valueArgument
            (expression
              (disjunction
                (conjunction
                  (equality
                    (comparison
                      (infixOperation
                        (elvisExpression
                          (infixFunctionCall
                            (rangeExpression
                              (additiveExpression
                                (multiplicativeExpression
                                  (asExpression
                                    (prefixUnaryExpression
                                      (postfixUnaryExpression
                                        (primaryExpression
                                          (simpleIdentifier
                                            (PARAM))))))))))))))))))
          (RPAREN)))))
  (semis
    (NLS))
  (class_declaration
    (CLASS)
    (WS)
    (type_identifier
      (Identifier))
    (WS)
    (COLON)
    (WS)
    (delegation_specifier
      (user_type
        (userType
          (simpleUserType
            (type_identifier
              (Identifier))))))))

==================
Properties
==================
class Something {
	val x: Int = 4
	var y: Int?
	val z: Int get() = x
}
---

(source_file
  (class_declaration
    (CLASS)
    (WS)
    (type_identifier
      (Identifier))
    (WS)
    (class_body
      (LCURL)
      (NLS)
      (WS)
      (property_declaration
        (WS)
        (variable_declaration
          (simpleIdentifier
            (Identifier))
          (WS)
          (type
            (typeReference
              (userType
                (simpleUserType
                  (type_identifier
                    (Identifier)))))))
        (WS)
        (WS)
        (expression
          (disjunction
            (conjunction
              (equality
                (comparison
                  (infixOperation
                    (elvisExpression
                      (infixFunctionCall
                        (rangeExpression
                          (additiveExpression
                            (multiplicativeExpression
                              (asExpression
                                (prefixUnaryExpression
                                  (postfixUnaryExpression
                                    (primaryExpression
                                      (literalConstant
                                        (IntegerLiteral))))))))))))))))))
      (semis
        (NLS))
      (WS)
      (property_declaration
        (WS)
        (variable_declaration
          (simpleIdentifier
            (Identifier))
          (WS)
          (type
            (nullableType
              (typeReference
                (userType
                  (simpleUserType
                    (type_identifier
                      (Identifier)))))
              (quest
                (NLSQUEST))))))
      (semis
        (NLS))
      (WS)
      (property_declaration
        (WS)
        (variable_declaration
          (simpleIdentifier
            (Identifier))
          (WS)
          (type
            (typeReference
              (userType
                (simpleUserType
                  (type_identifier
                    (Identifier)))))))
        (WS)
        (getter
          (WS)
          (function_body
            (WS)
            (expression
              (disjunction
                (conjunction
                  (equality
                    (comparison
                      (infixOperation
                        (elvisExpression
                          (infixFunctionCall
                            (rangeExpression
                              (additiveExpression
                                (multiplicativeExpression
                                  (asExpression
                                    (prefixUnaryExpression
                                      (postfixUnaryExpression
                                        (primaryExpression
                                          (simpleIdentifier
                                            (Identifier))))))))))))))))))))
      (semis
        (NLS))
      (RCURL))))

==================
Constructor delegation calls
==================
class Test(x: Int, y: Int) {
	constructor() : this(0, 0)
}
---

(source_file
  (class_declaration
    (CLASS)
    (WS)
    (type_identifier
      (Identifier))
    (primary_constructor
      (LPAREN)
      (class_parameter
        (simpleIdentifier
          (Identifier))
        (WS)
        (type
          (typeReference
            (userType
              (simpleUserType
                (type_identifier
                  (Identifier)))))))
      (WS)
      (class_parameter
        (simpleIdentifier
          (Identifier))
        (WS)
        (type
          (typeReference
            (userType
              (simpleUserType
                (type_identifier
                  (Identifier)))))))
      (RPAREN))
    (WS)
    (class_body
      (LCURL)
      (NLS)
      (WS)
      (secondary_constructor
        (CONSTRUCTOR)
        (WS)
        (WS)
        (constructor_delegation_call
          (value_arguments
            (valueArguments
              (LPAREN)
              (valueArgument
                (expression
                  (disjunction
                    (conjunction
                      (equality
                        (comparison
                          (infixOperation
                            (elvisExpression
                              (infixFunctionCall
                                (rangeExpression
                                  (additiveExpression
                                    (multiplicativeExpression
                                      (asExpression
                                        (prefixUnaryExpression
                                          (postfixUnaryExpression
                                            (primaryExpression
                                              (literalConstant
                                                (IntegerLiteral))))))))))))))))))
              (COMMA)
              (WS)
              (valueArgument
                (expression
                  (disjunction
                    (conjunction
                      (equality
                        (comparison
                          (infixOperation
                            (elvisExpression
                              (infixFunctionCall
                                (rangeExpression
                                  (additiveExpression
                                    (multiplicativeExpression
                                      (asExpression
                                        (prefixUnaryExpression
                                          (postfixUnaryExpression
                                            (primaryExpression
                                              (literalConstant
                                                (IntegerLiteral))))))))))))))))))
              (RPAREN)))))
      (semis
        (NLS))
      (RCURL))))

==================
Enum classes
==================
enum class Suit {
	DIAMONDS, CLOVERS, HEARTS, SPADES
}

enum class Color(val rgb: Int) {
	RED(0xFF0000),
	GREEN(0x00FF00),
	BLUE(0x0000FF);

	override fun toString() = rgb.toString(16)
}
---

(source_file
  (class_declaration
    (modifiers
      (class_modifier
        (ENUM)))
    (WS)
    (CLASS)
    (WS)
    (type_identifier
      (Identifier))
    (WS)
    (enum_class_body
      (LCURL)
      (NLS)
      (WS)
      (enum_entry
        (simpleIdentifier
          (Identifier)))
      (COMMA)
      (WS)
      (enum_entry
        (simpleIdentifier
          (Identifier)))
      (COMMA)
      (WS)
      (enum_entry
        (simpleIdentifier
          (Identifier)))
      (COMMA)
      (WS)
      (enum_entry
        (simpleIdentifier
          (Identifier)))
      (NLS)
      (RCURL)))
  (semis
    (NLS))
  (class_declaration
    (modifiers
      (class_modifier
        (ENUM)))
    (WS)
    (CLASS)
    (WS)
    (type_identifier
      (Identifier))
    (primary_constructor
      (LPAREN)
      (class_parameter
        (WS)
        (simpleIdentifier
          (Identifier))
        (WS)
        (type
          (typeReference
            (userType
              (simpleUserType
                (type_identifier
                  (Identifier)))))))
      (RPAREN))
    (WS)
    (enum_class_body
      (LCURL)
      (NLS)
      (WS)
      (enum_entry
        (simpleIdentifier
          (Identifier))
        (value_arguments
          (valueArguments
            (LPAREN)
            (valueArgument
              (expression
                (disjunction
                  (conjunction
                    (equality
                      (comparison
                        (infixOperation
                          (elvisExpression
                            (infixFunctionCall
                              (rangeExpression
                                (additiveExpression
                                  (multiplicativeExpression
                                    (asExpression
                                      (prefixUnaryExpression
                                        (postfixUnaryExpression
                                          (primaryExpression
                                            (literalConstant
                                              (HexLiteral))))))))))))))))))
            (RPAREN))))
      (COMMA)
      (NLS)
      (WS)
      (enum_entry
        (simpleIdentifier
          (Identifier))
        (value_arguments
          (valueArguments
            (LPAREN)
            (valueArgument
              (expression
                (disjunction
                  (conjunction
                    (equality
                      (comparison
                        (infixOperation
                          (elvisExpression
                            (infixFunctionCall
                              (rangeExpression
                                (additiveExpression
                                  (multiplicativeExpression
                                    (asExpression
                                      (prefixUnaryExpression
                                        (postfixUnaryExpression
                                          (primaryExpression
                                            (literalConstant
                                              (HexLiteral))))))))))))))))))
            (RPAREN))))
      (COMMA)
      (NLS)
      (WS)
      (enum_entry
        (simpleIdentifier
          (Identifier))
        (value_arguments
          (valueArguments
            (LPAREN)
            (valueArgument
              (expression
                (disjunction
                  (conjunction
                    (equality
                      (comparison
                        (infixOperation
                          (elvisExpression
                            (infixFunctionCall
                              (rangeExpression
                                (additiveExpression
                                  (multiplicativeExpression
                                    (asExpression
                                      (prefixUnaryExpression
                                        (postfixUnaryExpression
                                          (primaryExpression
                                            (literalConstant
                                              (HexLiteral))))))))))))))))))
            (RPAREN))))
      (NLS)
      (WS)
      (function_declaration
        (modifiers
          (member_modifier
            (OVERRIDE)))
        (WS)
        (WS)
        (simpleIdentifier
          (Identifier))
        (WS)
        (function_body
          (WS)
          (expression
            (disjunction
              (conjunction
                (equality
                  (comparison
                    (infixOperation
                      (elvisExpression
                        (infixFunctionCall
                          (rangeExpression
                            (additiveExpression
                              (multiplicativeExpression
                                (asExpression
                                  (prefixUnaryExpression
                                    (postfixUnaryExpression
                                      (primaryExpression
                                        (simpleIdentifier
                                          (Identifier)))
                                      (postfixUnarySuffix
                                        (navigationSuffix
                                          (memberAccessOperator
                                            (DOT))
                                          (simpleIdentifier
                                            (Identifier))))
                                      (postfixUnarySuffix
                                        (callSuffix
                                          (valueArguments
                                            (LPAREN)
                                            (valueArgument
                                              (expression
                                                (disjunction
                                                  (conjunction
                                                    (equality
                                                      (comparison
                                                        (infixOperation
                                                          (elvisExpression
                                                            (infixFunctionCall
                                                              (rangeExpression
                                                                (additiveExpression
                                                                  (multiplicativeExpression
                                                                    (asExpression
                                                                      (prefixUnaryExpression
                                                                        (postfixUnaryExpression
                                                                          (primaryExpression
                                                                            (literalConstant
                                                                              (IntegerLiteral))))))))))))))))))
                                            (RPAREN))))))))))))))))))))
      (semis
        (NLS))
      (RCURL))))

==================
Property with empty getter
==================
val x = 1
  get
---

(source_file
  (property_declaration
    (WS)
    (variable_declaration
      (simpleIdentifier
        (Identifier)))
    (WS)
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (literalConstant
                                    (IntegerLiteral)))))))))))))))))
    (semi
      (NLS))
    (WS)
    (getter)))

==================
Property with initializer confusing with getter
==================
val x = 1 get 2
---

(source_file
  (property_declaration
    (WS)
    (variable_declaration
      (simpleIdentifier
        (Identifier)))
    (WS)
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (infixFunctionCall
                      (rangeExpression
                        (additiveExpression
                          (multiplicativeExpression
                            (asExpression
                              (prefixUnaryExpression
                                (postfixUnaryExpression
                                  (primaryExpression
                                    (literalConstant
                                      (IntegerLiteral))))))))))
                    (WS)
                    (simpleIdentifier
                      (GET))
                    (WS)
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (literalConstant
                                    (IntegerLiteral)))))))))))))))))))

==================
Type constraints as a mess of soft keywords
==================
interface I
infix fun I.where(that: I): I {
  return that
}
fun f(T: I) {
  class A<T>(val x : I) : I by x where T
}
---

(source_file
  (class_declaration
    (WS)
    (type_identifier
      (Identifier)))
  (semis
    (NLS))
  (function_declaration
    (modifiers
      (function_modifier
        (INFIX)))
    (WS)
    (WS)
    (receiverTypeWithDot
      (receiverType
        (typeReference
          (userType
            (simpleUserType
              (type_identifier
                (Identifier))))))
      (DOT))
    (simpleIdentifier
      (WHERE))
    (parameter
      (simpleIdentifier
        (Identifier))
      (COLON)
      (WS)
      (type
        (typeReference
          (userType
            (simpleUserType
              (type_identifier
                (Identifier)))))))
    (COLON)
    (WS)
    (type
      (typeReference
        (userType
          (simpleUserType
            (type_identifier
              (Identifier))))))
    (WS)
    (function_body
      (block
        (LCURL)
        (NLS)
        (WS)
        (statements
          (expression
            (disjunctionWithReturn
              (conjunctionWithReturn
                (equalityWithReturn
                  (comparisonWithReturn
                    (infixOperationWithReturn
                      (elvisExpressionWithReturn
                        (infixFunctionCallWithReturn
                          (rangeExpressionWithReturn
                            (additiveExpressionWithReturn
                              (multiplicativeExpressionWithReturn
                                (asExpressionWithReturn
                                  (prefixUnaryExpressionWithReturn
                                    (rightRecursiveExpression
                                      (jumpExpression
                                        (RETURN)
                                        (WS)
                                        (expression
                                          (disjunction
                                            (conjunction
                                              (equality
                                                (comparison
                                                  (infixOperation
                                                    (elvisExpression
                                                      (infixFunctionCall
                                                        (rangeExpression
                                                          (additiveExpression
                                                            (multiplicativeExpression
                                                              (asExpression
                                                                (prefixUnaryExpression
                                                                  (postfixUnaryExpression
                                                                    (primaryExpression
                                                                      (simpleIdentifier
                                                                        (Identifier))))))))))))))))))))))))))))))))
          (semis
            (NLS)))
        (RCURL))))
  (semis
    (NLS))
  (function_declaration
    (WS)
    (simpleIdentifier
      (Identifier))
    (parameter
      (simpleIdentifier
        (Identifier))
      (COLON)
      (WS)
      (type
        (typeReference
          (userType
            (simpleUserType
              (type_identifier
                (Identifier)))))))
    (WS)
    (function_body
      (block
        (LCURL)
        (NLS)
        (WS)
        (statements
          (class_declaration
            (CLASS)
            (WS)
            (type_identifier
              (Identifier))
            (type_parameters
              (LANGLE)
              (type_parameter
                (type_identifier
                  (Identifier)))
              (RANGLE))
            (primary_constructor
              (LPAREN)
              (class_parameter
                (WS)
                (simpleIdentifier
                  (Identifier))
                (WS)
                (WS)
                (type
                  (typeReference
                    (userType
                      (simpleUserType
                        (type_identifier
                          (Identifier)))))))
              (RPAREN))
            (WS)
            (COLON)
            (WS)
            (delegation_specifier
              (explicit_delegation
                (user_type
                  (userType
                    (simpleUserType
                      (type_identifier
                        (Identifier)))))
                (WS)
                (WS)
                (expression
                  (disjunction
                    (conjunction
                      (equality
                        (comparison
                          (infixOperation
                            (elvisExpression
                              (infixFunctionCall
                                (infixFunctionCall
                                  (rangeExpression
                                    (additiveExpression
                                      (multiplicativeExpression
                                        (asExpression
                                          (prefixUnaryExpression
                                            (postfixUnaryExpression
                                              (primaryExpression
                                                (simpleIdentifier
                                                  (Identifier))))))))))
                                (WS)
                                (simpleIdentifier
                                  (WHERE))
                                (WS)
                                (rangeExpression
                                  (additiveExpression
                                    (multiplicativeExpression
                                      (asExpression
                                        (prefixUnaryExpression
                                          (postfixUnaryExpression
                                            (primaryExpression
                                              (simpleIdentifier
                                                (Identifier))))))))))))))))))))
          (semis
            (NLS)))
        (RCURL)))))

==================
Type constraints
==================
fun f(T: I) {
    class A<T>(val x : I) : I where T : I
}
---

(source_file
  (function_declaration
    (WS)
    (simpleIdentifier
      (Identifier))
    (parameter
      (simpleIdentifier
        (Identifier))
      (COLON)
      (WS)
      (type
        (typeReference
          (userType
            (simpleUserType
              (type_identifier
                (Identifier)))))))
    (WS)
    (function_body
      (block
        (LCURL)
        (NLS)
        (WS)
        (statements
          (class_declaration
            (CLASS)
            (WS)
            (type_identifier
              (Identifier))
            (type_parameters
              (LANGLE)
              (type_parameter
                (type_identifier
                  (Identifier)))
              (RANGLE))
            (primary_constructor
              (LPAREN)
              (class_parameter
                (WS)
                (simpleIdentifier
                  (Identifier))
                (WS)
                (WS)
                (type
                  (typeReference
                    (userType
                      (simpleUserType
                        (type_identifier
                          (Identifier)))))))
              (RPAREN))
            (WS)
            (COLON)
            (WS)
            (delegation_specifier
              (user_type
                (userType
                  (simpleUserType
                    (type_identifier
                      (Identifier))))))
            (WS)
            (type_constraints
              (WS)
              (type_constraint
                (type_identifier
                  (Identifier))
                (WS)
                (COLON)
                (WS)
                (type
                  (typeReference
                    (userType
                      (simpleUserType
                        (type_identifier
                          (Identifier)))))))))
          (semis
            (NLS)))
        (RCURL)))))

