==================
Classes
==================
class Empty
class Empty2 {}
---

(source_file
  (class_declaration
    (CLASS)
    (WS)
    (type_identifier
      (simpleIdentifier
        (Identifier))))
  (semis
    (NLS))
  (class_declaration
    (CLASS)
    (WS)
    (type_identifier
      (simpleIdentifier
        (Identifier)))
    (WS)
    (class_body)))
 
==================
Class with methods
==================
class HelloWorld {
	fun a() {}

	fun b() {}
}
---

(source_file
  (class_declaration
    (CLASS)
    (WS)
    (type_identifier
      (simpleIdentifier
        (Identifier)))
    (WS)
    (class_body
      (NLS)
      (WS)
      (function_declaration
        (WS)
        (simple_identifier
          (simpleIdentifier
            (Identifier)))
        (WS)
        (function_body))
      (semis
        (NLS))
      (WS)
      (function_declaration
        (WS)
        (simple_identifier
          (simpleIdentifier
            (Identifier)))
        (WS)
        (function_body))
      (semis
        (NLS)))))

==================
Generic class
==================
class Container<T> {}
---

(source_file
  (class_declaration
    (CLASS)
    (WS)
    (type_identifier
      (simpleIdentifier
        (Identifier)))
    (type_parameters
      (LANGLE)
      (type_parameter
        (type_identifier
          (simpleIdentifier
            (Identifier))))
      (RANGLE))
    (WS)
    (class_body)))

==================
Class with methods and expressions
==================
class Strings {
	fun aString() = "Hello World!"

	fun anotherString() = "Hello" + " " + "World"
}
---

(source_file
  (class_declaration
    (CLASS)
    (WS)
    (type_identifier
      (simpleIdentifier
        (Identifier)))
    (WS)
    (class_body
      (NLS)
      (WS)
      (function_declaration
        (WS)
        (simple_identifier
          (simpleIdentifier
            (Identifier)))
        (WS)
        (function_body
          (WS)
          (expression
            (disjunction
              (conjunction
                (equality
                  (comparison
                    (infixOperation
                      (elvisExpression
                        (infixFunctionCall
                          (rangeExpression
                            (additiveExpression
                              (multiplicativeExpression
                                (asExpression
                                  (prefixUnaryExpression
                                    (postfixUnaryExpression
                                      (primaryExpression
                                        (stringLiteral
                                          (line_string_literal)))))))))))))))))))
      (semis
        (NLS))
      (WS)
      (function_declaration
        (WS)
        (simple_identifier
          (simpleIdentifier
            (Identifier)))
        (WS)
        (function_body
          (WS)
          (expression
            (disjunction
              (conjunction
                (equality
                  (comparison
                    (infixOperation
                      (elvisExpression
                        (infixFunctionCall
                          (rangeExpression
                            (additiveExpression
                              (multiplicativeExpression
                                (asExpression
                                  (prefixUnaryExpression
                                    (postfixUnaryExpression
                                      (primaryExpression
                                        (stringLiteral
                                          (line_string_literal)))))))
                              (WS)
                              (additiveOperator
                                (ADD))
                              (WS)
                              (multiplicativeExpression
                                (asExpression
                                  (prefixUnaryExpression
                                    (postfixUnaryExpression
                                      (primaryExpression
                                        (stringLiteral
                                          (line_string_literal)))))))
                              (WS)
                              (additiveOperator
                                (ADD))
                              (WS)
                              (multiplicativeExpression
                                (asExpression
                                  (prefixUnaryExpression
                                    (postfixUnaryExpression
                                      (primaryExpression
                                        (stringLiteral
                                          (line_string_literal)))))))))))))))))))
      (semis
        (NLS)))))

==================
Class with modifiers
==================
internal open class Test {
	private abstract inline fun test()
}
---

(source_file
  (class_declaration
    (modifiers
      (visibility_modifier
        (INTERNAL ))
      (WS )
      (inheritance_modifier
        (OPEN )))
    (WS )
    (CLASS )
    (WS )
    (type_identifier
      (simpleIdentifier
        (Identifier )))
    (WS )
    (class_body
      (NLS )
      (WS )
      (function_declaration
        (modifiers
          (visibility_modifier
            (PRIVATE ))
          (WS )
          (inheritance_modifier
            (ABSTRACT ))
          (WS )
          (function_modifier
            (INLINE )))
        (WS )
        (WS )
        (simple_identifier
          (simpleIdentifier
            (Identifier ))))
      (semis
        (NLS )))))

==================
Objects
==================
object Singleton {
	fun test()
}
---

(source_file
  (object_declaration
    (WS)
    (type_identifier
      (simpleIdentifier
        (Identifier)))
    (WS)
    (class_body
      (NLS)
      (WS)
      (function_declaration
        (WS)
        (simple_identifier
          (simpleIdentifier
            (Identifier))))
      (semis
        (NLS)))))

==================
Primary constructors
==================
data class Vector2D(
	val x: Int,
	val y: Int
)
---

(source_file
  (class_declaration
    (modifiers
      (class_modifier
        (DATA)))
    (WS)
    (CLASS)
    (WS)
    (type_identifier
      (simpleIdentifier
        (Identifier)))
    (primary_constructor
      (NLS)
      (WS)
      (class_parameter
        (WS)
        (simple_identifier
          (simpleIdentifier
            (Identifier)))
        (WS)
        (type
          (typeReference
            (userType
              (simpleUserType
                (simpleIdentifier
                  (Identifier)))))))
      (NLS)
      (WS)
      (class_parameter
        (WS)
        (simple_identifier
          (simpleIdentifier
            (Identifier)))
        (WS)
        (type
          (typeReference
            (userType
              (simpleUserType
                (simpleIdentifier
                  (Identifier)))))))
      (NLS))))

==================
Inheritance
==================
class A : B() {}

class C(param: Int) : D(param)

class D : SomeInterface
---

(source_file
  (class_declaration
    (CLASS)
    (WS)
    (type_identifier
      (simpleIdentifier
        (Identifier)))
    (WS)
    (COLON)
    (WS)
    (delegation_specifier
      (constructor_invocation
        (constructorInvocation
          (userType
            (simpleUserType
              (simpleIdentifier
                (Identifier))))
          (valueArguments
            (LPAREN)
            (RPAREN)))))
    (WS)
    (class_body))
  (semis
    (NLS))
  (class_declaration
    (CLASS)
    (WS)
    (type_identifier
      (simpleIdentifier
        (Identifier)))
    (primary_constructor
      (class_parameter
        (simple_identifier
          (simpleIdentifier
            (PARAM)))
        (WS)
        (type
          (typeReference
            (userType
              (simpleUserType
                (simpleIdentifier
                  (Identifier))))))))
    (WS)
    (COLON)
    (WS)
    (delegation_specifier
      (constructor_invocation
        (constructorInvocation
          (userType
            (simpleUserType
              (simpleIdentifier
                (Identifier))))
          (valueArguments
            (LPAREN)
            (valueArgument
              (expression
                (disjunction
                  (conjunction
                    (equality
                      (comparison
                        (infixOperation
                          (elvisExpression
                            (infixFunctionCall
                              (rangeExpression
                                (additiveExpression
                                  (multiplicativeExpression
                                    (asExpression
                                      (prefixUnaryExpression
                                        (postfixUnaryExpression
                                          (primaryExpression
                                            (simpleIdentifier
                                              (PARAM))))))))))))))))))
            (RPAREN))))))
  (semis
    (NLS))
  (class_declaration
    (CLASS)
    (WS)
    (type_identifier
      (simpleIdentifier
        (Identifier)))
    (WS)
    (COLON)
    (WS)
    (delegation_specifier
      (userType
        (simpleUserType
          (simpleIdentifier
            (Identifier)))))))

==================
Properties
==================
class Something {
	val x: Int = 4
	var y: Int?
	val z: Int get() = x
}
---

(source_file
  (class_declaration
    (CLASS)
    (WS)
    (type_identifier
      (simpleIdentifier
        (Identifier)))
    (WS)
    (class_body
      (NLS)
      (WS)
      (property_declaration
        (WS)
        (variable_declaration
          (simple_identifier
            (simpleIdentifier
              (Identifier)))
          (WS)
          (type
            (typeReference
              (userType
                (simpleUserType
                  (simpleIdentifier
                    (Identifier)))))))
        (WS)
        (WS)
        (expression
          (disjunction
            (conjunction
              (equality
                (comparison
                  (infixOperation
                    (elvisExpression
                      (infixFunctionCall
                        (rangeExpression
                          (additiveExpression
                            (multiplicativeExpression
                              (asExpression
                                (prefixUnaryExpression
                                  (postfixUnaryExpression
                                    (primaryExpression
                                      (literalConstant
                                        (IntegerLiteral))))))))))))))))))
      (semis
        (NLS))
      (WS)
      (property_declaration
        (WS)
        (variable_declaration
          (simple_identifier
            (simpleIdentifier
              (Identifier)))
          (WS)
          (type
            (nullableType
              (typeReference
                (userType
                  (simpleUserType
                    (simpleIdentifier
                      (Identifier)))))
              (quest
                (QUEST_NO_WS))))))
      (semis
        (NLS))
      (WS)
      (property_declaration
        (WS)
        (variable_declaration
          (simple_identifier
            (simpleIdentifier
              (Identifier)))
          (WS)
          (type
            (typeReference
              (userType
                (simpleUserType
                  (simpleIdentifier
                    (Identifier)))))))
        (WS)
        (getter
          (WS)
          (function_body
            (WS)
            (expression
              (disjunction
                (conjunction
                  (equality
                    (comparison
                      (infixOperation
                        (elvisExpression
                          (infixFunctionCall
                            (rangeExpression
                              (additiveExpression
                                (multiplicativeExpression
                                  (asExpression
                                    (prefixUnaryExpression
                                      (postfixUnaryExpression
                                        (primaryExpression
                                          (simpleIdentifier
                                            (Identifier))))))))))))))))))))
      (semis
        (NLS)))))

==================
Constructor delegation calls
==================
class Test(x: Int, y: Int) {
	constructor() : this(0, 0)
}
---

(source_file
  (class_declaration
    (CLASS)
    (WS)
    (type_identifier
      (simpleIdentifier
        (Identifier)))
    (primary_constructor
      (class_parameter
        (simple_identifier
          (simpleIdentifier
            (Identifier)))
        (WS)
        (type
          (typeReference
            (userType
              (simpleUserType
                (simpleIdentifier
                  (Identifier)))))))
      (WS)
      (class_parameter
        (simple_identifier
          (simpleIdentifier
            (Identifier)))
        (WS)
        (type
          (typeReference
            (userType
              (simpleUserType
                (simpleIdentifier
                  (Identifier))))))))
    (WS)
    (class_body
      (NLS)
      (WS)
      (secondary_constructor
        (WS)
        (WS)
        (constructor_delegation_call
          (value_arguments
            (valueArguments
              (LPAREN)
              (valueArgument
                (expression
                  (disjunction
                    (conjunction
                      (equality
                        (comparison
                          (infixOperation
                            (elvisExpression
                              (infixFunctionCall
                                (rangeExpression
                                  (additiveExpression
                                    (multiplicativeExpression
                                      (asExpression
                                        (prefixUnaryExpression
                                          (postfixUnaryExpression
                                            (primaryExpression
                                              (literalConstant
                                                (IntegerLiteral))))))))))))))))))
              (COMMA)
              (WS)
              (valueArgument
                (expression
                  (disjunction
                    (conjunction
                      (equality
                        (comparison
                          (infixOperation
                            (elvisExpression
                              (infixFunctionCall
                                (rangeExpression
                                  (additiveExpression
                                    (multiplicativeExpression
                                      (asExpression
                                        (prefixUnaryExpression
                                          (postfixUnaryExpression
                                            (primaryExpression
                                              (literalConstant
                                                (IntegerLiteral))))))))))))))))))
              (RPAREN)))))
      (semis
        (NLS)))))

==================
Enum classes
==================
enum class Suit {
	DIAMONDS, CLOVERS, HEARTS, SPADES
}

enum class Color(val rgb: Int) {
	RED(0xFF0000),
	GREEN(0x00FF00),
	BLUE(0x0000FF);

	override fun toString() = rgb.toString(16)
}
---

(source_file
  (class_declaration
    (ENUM)
    (WS)
    (CLASS)
    (WS)
    (type_identifier
      (simpleIdentifier
        (Identifier)))
    (WS)
    (enum_class_body
      (NLS)
      (WS)
      (enum_entry
        (simple_identifier
          (simpleIdentifier
            (Identifier))))
      (WS)
      (enum_entry
        (simple_identifier
          (simpleIdentifier
            (Identifier))))
      (WS)
      (enum_entry
        (simple_identifier
          (simpleIdentifier
            (Identifier))))
      (WS)
      (enum_entry
        (simple_identifier
          (simpleIdentifier
            (Identifier))))
      (NLS)))
  (semis
    (NLS))
  (class_declaration
    (ENUM)
    (WS)
    (CLASS)
    (WS)
    (type_identifier
      (simpleIdentifier
        (Identifier)))
    (primary_constructor
      (class_parameter
        (WS)
        (simple_identifier
          (simpleIdentifier
            (Identifier)))
        (WS)
        (type
          (typeReference
            (userType
              (simpleUserType
                (simpleIdentifier
                  (Identifier))))))))
    (WS)
    (enum_class_body
      (NLS)
      (WS)
      (enum_entry
        (simple_identifier
          (simpleIdentifier
            (Identifier)))
        (value_arguments
          (valueArguments
            (LPAREN)
            (valueArgument
              (expression
                (disjunction
                  (conjunction
                    (equality
                      (comparison
                        (infixOperation
                          (elvisExpression
                            (infixFunctionCall
                              (rangeExpression
                                (additiveExpression
                                  (multiplicativeExpression
                                    (asExpression
                                      (prefixUnaryExpression
                                        (postfixUnaryExpression
                                          (primaryExpression
                                            (literalConstant
                                              (HexLiteral))))))))))))))))))
            (RPAREN))))
      (NLS)
      (WS)
      (enum_entry
        (simple_identifier
          (simpleIdentifier
            (Identifier)))
        (value_arguments
          (valueArguments
            (LPAREN)
            (valueArgument
              (expression
                (disjunction
                  (conjunction
                    (equality
                      (comparison
                        (infixOperation
                          (elvisExpression
                            (infixFunctionCall
                              (rangeExpression
                                (additiveExpression
                                  (multiplicativeExpression
                                    (asExpression
                                      (prefixUnaryExpression
                                        (postfixUnaryExpression
                                          (primaryExpression
                                            (literalConstant
                                              (HexLiteral))))))))))))))))))
            (RPAREN))))
      (NLS)
      (WS)
      (enum_entry
        (simple_identifier
          (simpleIdentifier
            (Identifier)))
        (value_arguments
          (valueArguments
            (LPAREN)
            (valueArgument
              (expression
                (disjunction
                  (conjunction
                    (equality
                      (comparison
                        (infixOperation
                          (elvisExpression
                            (infixFunctionCall
                              (rangeExpression
                                (additiveExpression
                                  (multiplicativeExpression
                                    (asExpression
                                      (prefixUnaryExpression
                                        (postfixUnaryExpression
                                          (primaryExpression
                                            (literalConstant
                                              (HexLiteral))))))))))))))))))
            (RPAREN))))
      (NLS)
      (WS)
      (function_declaration
        (modifiers
          (member_modifier
            (OVERRIDE)))
        (WS)
        (WS)
        (simple_identifier
          (simpleIdentifier
            (Identifier)))
        (WS)
        (function_body
          (WS)
          (expression
            (disjunction
              (conjunction
                (equality
                  (comparison
                    (infixOperation
                      (elvisExpression
                        (infixFunctionCall
                          (rangeExpression
                            (additiveExpression
                              (multiplicativeExpression
                                (asExpression
                                  (prefixUnaryExpression
                                    (postfixUnaryExpression
                                      (primaryExpression
                                        (simpleIdentifier
                                          (Identifier)))
                                      (postfixUnarySuffix
                                        (navigationSuffix
                                          (memberAccessOperator
                                            (DOT))
                                          (simpleIdentifier
                                            (Identifier))))
                                      (postfixUnarySuffix
                                        (callSuffix
                                          (valueArguments
                                            (LPAREN)
                                            (valueArgument
                                              (expression
                                                (disjunction
                                                  (conjunction
                                                    (equality
                                                      (comparison
                                                        (infixOperation
                                                          (elvisExpression
                                                            (infixFunctionCall
                                                              (rangeExpression
                                                                (additiveExpression
                                                                  (multiplicativeExpression
                                                                    (asExpression
                                                                      (prefixUnaryExpression
                                                                        (postfixUnaryExpression
                                                                          (primaryExpression
                                                                            (literalConstant
                                                                              (IntegerLiteral))))))))))))))))))
                                            (RPAREN))))))))))))))))))))
      (semis
        (NLS)))))
