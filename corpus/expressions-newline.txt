==================
Multiline expression
==================
val text = "a " +
            "line"
---

(source_file
  (property_declaration
    (WS)
    (variable_declaration
      (simple_identifier
        (simpleIdentifier
          (Identifier))))
    (WS)
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (stringLiteral
                                    (line_string_literal)))))))
                        (WS)
                        (additiveOperator
                          (ADD))
                        (NLS)
                        (WS)
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (stringLiteral
                                    (line_string_literal)))))))))))))))))))

==================
Incorrect multiline expression
==================
val text = "a "
          + "line"
---

(source_file
  (property_declaration
    (WS)
    (variable_declaration
      (simple_identifier
        (simpleIdentifier
          (Identifier))))
    (WS)
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (stringLiteral
                                    (line_string_literal))))))))))))))))))
  (semis
    (NLS))
  (WS)
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (unaryPrefix
                              (prefixUnaryOperator
                                (ADD)))
                            (WS)
                            (postfixUnaryExpression
                              (primaryExpression
                                (stringLiteral
                                  (line_string_literal))))))))))))))))))
