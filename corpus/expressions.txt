==================
Multiline expression
==================
val text = "a " +
            "line"
---

(source_file
  (property_declaration
    (WS)
    (variable_declaration
      (simple_identifier
        (simpleIdentifier
          (Identifier))))
    (WS)
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (stringLiteral
                                    (line_string_literal)))))))
                        (WS)
                        (additiveOperator
                          (ADD))
                        (NLS)
                        (WS)
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (stringLiteral
                                    (line_string_literal)))))))))))))))))))

==================
Incorrect multiline expression
==================
val text = "a "
          + "line"
---

(source_file
  (property_declaration
    (WS)
    (variable_declaration
      (simple_identifier
        (simpleIdentifier
          (Identifier))))
    (WS)
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (stringLiteral
                                    (line_string_literal))))))))))))))))))
  (semis
    (NLS))
  (WS)
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (unaryPrefix
                              (prefixUnaryOperator
                                (ADD)))
                            (WS)
                            (postfixUnaryExpression
                              (primaryExpression
                                (stringLiteral
                                  (line_string_literal))))))))))))))))))

==================
Method call
==================
ob.callMethod(16 + 14 / 5)
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier )))
                              (postfixUnarySuffix
                                (navigationSuffix
                                  (memberAccessOperator
                                    (DOT ))
                                  (simpleIdentifier
                                    (Identifier ))))
                              (postfixUnarySuffix
                                (callSuffix
                                  (valueArguments
                                    (LPAREN )
                                    (valueArgument
                                      (expression
                                        (disjunction
                                          (conjunction
                                            (equality
                                              (comparison
                                                (infixOperation
                                                  (elvisExpression
                                                    (infixFunctionCall
                                                      (rangeExpression
                                                        (additiveExpression
                                                          (multiplicativeExpression
                                                            (asExpression
                                                              (prefixUnaryExpression
                                                                (postfixUnaryExpression
                                                                  (primaryExpression
                                                                    (literalConstant
                                                                      (IntegerLiteral )))))))
                                                          (WS )
                                                          (additiveOperator
                                                            (ADD ))
                                                          (WS )
                                                          (multiplicativeExpression
                                                            (asExpression
                                                              (prefixUnaryExpression
                                                                (postfixUnaryExpression
                                                                  (primaryExpression
                                                                    (literalConstant
                                                                      (IntegerLiteral ))))))
                                                            (WS )
                                                            (multiplicativeOperator
                                                              (DIV ))
                                                            (WS )
                                                            (asExpression
                                                              (prefixUnaryExpression
                                                                (postfixUnaryExpression
                                                                  (primaryExpression
                                                                    (literalConstant
                                                                      (IntegerLiteral ))))))))))))))))))
                                    (RPAREN )))))))))))))))))))

==================
Multiplication expression
==================
45 * 3
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (literalConstant
                                  (IntegerLiteral))))))
                        (WS)
                        (multiplicativeOperator
                          (MULT))
                        (WS)
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (literalConstant
                                  (IntegerLiteral))))))))))))))))))

==================
Function calls
==================
print("Hello World!")
sum(1, 2)
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))
                              (postfixUnarySuffix
                                (callSuffix
                                  (valueArguments
                                    (LPAREN)
                                    (valueArgument
                                      (expression
                                        (disjunction
                                          (conjunction
                                            (equality
                                              (comparison
                                                (infixOperation
                                                  (elvisExpression
                                                    (infixFunctionCall
                                                      (rangeExpression
                                                        (additiveExpression
                                                          (multiplicativeExpression
                                                            (asExpression
                                                              (prefixUnaryExpression
                                                                (postfixUnaryExpression
                                                                  (primaryExpression
                                                                    (stringLiteral
                                                                      (line_string_literal))))))))))))))))))
                                    (RPAREN))))))))))))))))))
  (semis
    (NLS))
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))
                              (postfixUnarySuffix
                                (callSuffix
                                  (valueArguments
                                    (LPAREN)
                                    (valueArgument
                                      (expression
                                        (disjunction
                                          (conjunction
                                            (equality
                                              (comparison
                                                (infixOperation
                                                  (elvisExpression
                                                    (infixFunctionCall
                                                      (rangeExpression
                                                        (additiveExpression
                                                          (multiplicativeExpression
                                                            (asExpression
                                                              (prefixUnaryExpression
                                                                (postfixUnaryExpression
                                                                  (primaryExpression
                                                                    (literalConstant
                                                                      (IntegerLiteral))))))))))))))))))
                                    (COMMA)
                                    (WS)
                                    (valueArgument
                                      (expression
                                        (disjunction
                                          (conjunction
                                            (equality
                                              (comparison
                                                (infixOperation
                                                  (elvisExpression
                                                    (infixFunctionCall
                                                      (rangeExpression
                                                        (additiveExpression
                                                          (multiplicativeExpression
                                                            (asExpression
                                                              (prefixUnaryExpression
                                                                (postfixUnaryExpression
                                                                  (primaryExpression
                                                                    (literalConstant
                                                                      (IntegerLiteral))))))))))))))))))
                                    (RPAREN)))))))))))))))))))

==================
Constructor with generics
==================
val cache = ConcurrentHashMap<IconDescriptor, CompletableFuture<ByteArray?>>()
---

(source_file
  (property_declaration
    (WS)
    (variable_declaration
      (simple_identifier
        (simpleIdentifier
          (Identifier))))
    (WS)
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (simpleIdentifier
                                    (Identifier)))
                                (postfixUnarySuffix
                                  (callSuffix
                                    (typeArguments
                                      (LANGLE)
                                      (typeProjection
                                        (type
                                          (typeReference
                                            (userType
                                              (simpleUserType
                                                (type_identifier
                                                  (Identifier)))))))
                                      (COMMA)
                                      (WS)
                                      (typeProjection
                                        (type
                                          (typeReference
                                            (userType
                                              (simpleUserType
                                                (type_identifier
                                                  (Identifier))
                                                (typeArguments
                                                  (LANGLE)
                                                  (typeProjection
                                                    (type
                                                      (typeReference
                                                        (userType
                                                          (simpleUserType
                                                            (type_identifier
                                                              (Identifier)))))
                                                      (quest
                                                        (QUEST_NO_WS))))
                                                  (RANGLE)))))))
                                      (RANGLE))
                                    (valueArguments
                                      (LPAREN)
                                      (RPAREN))))))))))))))))))))

==================
Infix expressions
==================
1 should 5 should with (2) {
    3
}
---
(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (literalConstant
                                  (IntegerLiteral)))))))))
                  (WS)
                  (simpleIdentifier
                    (Identifier))
                  (WS)
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (literalConstant
                                  (IntegerLiteral)))))))))
                  (WS)
                  (simpleIdentifier
                    (Identifier))
                  (WS)
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))
                              (WS)
                              (postfixUnarySuffix
                                (callSuffix
                                  (valueArguments
                                    (LPAREN)
                                    (valueArgument
                                      (expression
                                        (disjunction
                                          (conjunction
                                            (equality
                                              (comparison
                                                (infixOperation
                                                  (elvisExpression
                                                    (infixFunctionCall
                                                      (rangeExpression
                                                        (additiveExpression
                                                          (multiplicativeExpression
                                                            (asExpression
                                                              (prefixUnaryExpression
                                                                (postfixUnaryExpression
                                                                  (primaryExpression
                                                                    (literalConstant
                                                                      (IntegerLiteral))))))))))))))))))
                                    (RPAREN))
                                  (WS)
                                  (annotated_lambda
                                    (lambda_literal
                                      (NLS)
                                      (WS)
                                      (statements
                                        (expression
                                          (disjunction
                                            (conjunction
                                              (equality
                                                (comparison
                                                  (infixOperation
                                                    (elvisExpression
                                                      (infixFunctionCall
                                                        (rangeExpression
                                                          (additiveExpression
                                                            (multiplicativeExpression
                                                              (asExpression
                                                                (prefixUnaryExpression
                                                                  (postfixUnaryExpression
                                                                    (primaryExpression
                                                                      (literalConstant
                                                                        (IntegerLiteral)))))))))))))))))
                                        (semis
                                          (NLS))))))))))))))))))))))

==================
Properties with getters and setters
==================
x = 2
val x
    ;
    public get
val y = 5
    set (
    v
    )

    {
  field = v
    }
---
(source_file
  (assignment
    (directly_assignable_expression
      (simple_identifier
        (simpleIdentifier
          (Identifier))))
    (WS)
    (ASSIGNMENT)
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (literalConstant
                                    (IntegerLiteral))))))))))))))))))
  (semis
    (NLS))
  (property_declaration
    (WS)
    (variable_declaration
      (simple_identifier
        (simpleIdentifier
          (Identifier))))
    (semi
      (NLS))
    (WS)
    (semi
      (NLS))
    (WS)
    (getter
      (modifiers
        (visibility_modifier
          (PUBLIC)))
      (WS)))
  (semis
    (NLS))
  (property_declaration
    (WS)
    (variable_declaration
      (simple_identifier
        (simpleIdentifier
          (Identifier))))
    (WS)
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (literalConstant
                                    (IntegerLiteral)))))))))))))))))
    (semi
      (NLS))
    (WS)
    (setter
      (WS)
      (NLS)
      (WS)
      (parameter_with_optional_type
        (simple_identifier
          (simpleIdentifier
            (Identifier))))
      (NLS)
      (WS)
      (NLS)
      (WS)
      (function_body
        (NLS)
        (WS)
        (statements
          (assignment
            (directly_assignable_expression
              (simple_identifier
                (simpleIdentifier
                  (FIELD))))
            (WS)
            (ASSIGNMENT)
            (WS)
            (expression
              (disjunction
                (conjunction
                  (equality
                    (comparison
                      (infixOperation
                        (elvisExpression
                          (infixFunctionCall
                            (rangeExpression
                              (additiveExpression
                                (multiplicativeExpression
                                  (asExpression
                                    (prefixUnaryExpression
                                      (postfixUnaryExpression
                                        (primaryExpression
                                          (simpleIdentifier
                                            (Identifier))))))))))))))))))
          (semis
            (NLS)))
        (WS)))))