==================
Multiline expression
==================
val text = "a " +
            "line"
---

(source_file
  (property_declaration
    (WS)
    (variable_declaration
      (simpleIdentifier
        (Identifier)))
    (WS)
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (additiveExpression
                          (multiplicativeExpression
                            (asExpression
                              (prefixUnaryExpression
                                (postfixUnaryExpression
                                  (primaryExpression
                                    (stringLiteral
                                      (lineStringLiteral
                                        (lineStringContent
                                          (LineStrText))))))))))
                        (WS)
                        (additiveOperator
                          (ADD))
                        (NLS)
                        (WS)
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (stringLiteral
                                    (lineStringLiteral
                                      (lineStringContent
                                        (LineStrText)))))))))))))))))))))

==================
Incorrect multiline expression
==================
val text = "a "
          + "line"
---

(source_file
  (property_declaration
    (WS)
    (variable_declaration
      (simpleIdentifier
        (Identifier)))
    (WS)
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (stringLiteral
                                    (lineStringLiteral
                                      (lineStringContent
                                        (LineStrText))))))))))))))))))))
  (semis
    (NLS))
  (WS)
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (unaryPrefix
                              (prefixUnaryOperator
                                (ADD)))
                            (WS)
                            (postfixUnaryExpression
                              (primaryExpression
                                (stringLiteral
                                  (lineStringLiteral
                                    (lineStringContent
                                      (LineStrText))))))))))))))))))))

==================
Method call
==================
ob.callMethod(16 + 14 / 5)
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))
                              (postfixUnarySuffix
                                (navigationSuffix
                                  (memberAccessOperator
                                    (DOT))
                                  (simpleIdentifier
                                    (Identifier))))
                              (postfixUnarySuffix
                                (callSuffix
                                  (valueArguments
                                    (LPAREN)
                                    (valueArgument
                                      (expression
                                        (disjunction
                                          (conjunction
                                            (equality
                                              (comparison
                                                (infixOperation
                                                  (elvisExpression
                                                    (infixFunctionCall
                                                      (rangeExpression
                                                        (additiveExpression
                                                          (additiveExpression
                                                            (multiplicativeExpression
                                                              (asExpression
                                                                (prefixUnaryExpression
                                                                  (postfixUnaryExpression
                                                                    (primaryExpression
                                                                      (literalConstant
                                                                        (IntegerLiteral))))))))
                                                          (WS)
                                                          (additiveOperator
                                                            (ADD))
                                                          (WS)
                                                          (multiplicativeExpression
                                                            (multiplicativeExpression
                                                              (asExpression
                                                                (prefixUnaryExpression
                                                                  (postfixUnaryExpression
                                                                    (primaryExpression
                                                                      (literalConstant
                                                                        (IntegerLiteral)))))))
                                                            (WS)
                                                            (multiplicativeOperator
                                                              (DIV))
                                                            (WS)
                                                            (asExpression
                                                              (prefixUnaryExpression
                                                                (postfixUnaryExpression
                                                                  (primaryExpression
                                                                    (literalConstant
                                                                      (IntegerLiteral))))))))))))))))))
                                    (RPAREN)))))))))))))))))))

==================
Multiplication expression
==================
45 * 3
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (literalConstant
                                    (IntegerLiteral)))))))
                        (WS)
                        (multiplicativeOperator
                          (MULT))
                        (WS)
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (literalConstant
                                  (IntegerLiteral))))))))))))))))))

==================
Function calls
==================
print("Hello World!")
sum(1, 2)
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))
                              (postfixUnarySuffix
                                (callSuffix
                                  (valueArguments
                                    (LPAREN)
                                    (valueArgument
                                      (expression
                                        (disjunction
                                          (conjunction
                                            (equality
                                              (comparison
                                                (infixOperation
                                                  (elvisExpression
                                                    (infixFunctionCall
                                                      (rangeExpression
                                                        (additiveExpression
                                                          (multiplicativeExpression
                                                            (asExpression
                                                              (prefixUnaryExpression
                                                                (postfixUnaryExpression
                                                                  (primaryExpression
                                                                    (stringLiteral
                                                                      (lineStringLiteral
                                                                        (lineStringContent
                                                                          (LineStrText))))))))))))))))))))
                                    (RPAREN))))))))))))))))))
  (semis
    (NLS))
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))
                              (postfixUnarySuffix
                                (callSuffix
                                  (valueArguments
                                    (LPAREN)
                                    (valueArgument
                                      (expression
                                        (disjunction
                                          (conjunction
                                            (equality
                                              (comparison
                                                (infixOperation
                                                  (elvisExpression
                                                    (infixFunctionCall
                                                      (rangeExpression
                                                        (additiveExpression
                                                          (multiplicativeExpression
                                                            (asExpression
                                                              (prefixUnaryExpression
                                                                (postfixUnaryExpression
                                                                  (primaryExpression
                                                                    (literalConstant
                                                                      (IntegerLiteral))))))))))))))))))
                                    (COMMA)
                                    (WS)
                                    (valueArgument
                                      (expression
                                        (disjunction
                                          (conjunction
                                            (equality
                                              (comparison
                                                (infixOperation
                                                  (elvisExpression
                                                    (infixFunctionCall
                                                      (rangeExpression
                                                        (additiveExpression
                                                          (multiplicativeExpression
                                                            (asExpression
                                                              (prefixUnaryExpression
                                                                (postfixUnaryExpression
                                                                  (primaryExpression
                                                                    (literalConstant
                                                                      (IntegerLiteral))))))))))))))))))
                                    (RPAREN)))))))))))))))))))

==================
Constructor with generics
==================
val cache = ConcurrentHashMap<IconDescriptor, CompletableFuture<ByteArray?>>()
---

(source_file
  (property_declaration
    (WS)
    (variable_declaration
      (simpleIdentifier
        (Identifier)))
    (WS)
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (simpleIdentifier
                                    (Identifier)))
                                (postfixUnarySuffix
                                  (typeArguments
                                    (LANGLE)
                                    (typeProjection
                                      (type
                                        (typeReference
                                          (userType
                                            (simpleUserType
                                              (type_identifier
                                                (Identifier)))))))
                                    (COMMA)
                                    (WS)
                                    (typeProjection
                                      (type
                                        (typeReference
                                          (userType
                                            (simpleUserType
                                              (type_identifier
                                                (Identifier))
                                              (typeArguments
                                                (LANGLE)
                                                (typeProjection
                                                  (type
                                                    (nullableType
                                                      (typeReference
                                                        (userType
                                                          (simpleUserType
                                                            (type_identifier
                                                              (Identifier)))))
                                                      (quest
                                                        (NLSQUEST)))))
                                                (RANGLE)))))))
                                    (RANGLE)))
                                (postfixUnarySuffix
                                  (callSuffix
                                    (valueArguments
                                      (LPAREN)
                                      (RPAREN))))))))))))))))))))

==================
Infix expressions
==================
1 should 5 should with (2) {
    3
}
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (infixFunctionCall
                    (infixFunctionCall
                      (rangeExpression
                        (additiveExpression
                          (multiplicativeExpression
                            (asExpression
                              (prefixUnaryExpression
                                (postfixUnaryExpression
                                  (primaryExpression
                                    (literalConstant
                                      (IntegerLiteral))))))))))
                    (WS)
                    (simpleIdentifier
                      (Identifier))
                    (WS)
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (literalConstant
                                    (IntegerLiteral))))))))))
                  (WS)
                  (simpleIdentifier
                    (Identifier))
                  (WS)
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))
                              (WS)
                              (postfixUnarySuffix
                                (callSuffix
                                  (valueArguments
                                    (LPAREN)
                                    (valueArgument
                                      (expression
                                        (disjunction
                                          (conjunction
                                            (equality
                                              (comparison
                                                (infixOperation
                                                  (elvisExpression
                                                    (infixFunctionCall
                                                      (rangeExpression
                                                        (additiveExpression
                                                          (multiplicativeExpression
                                                            (asExpression
                                                              (prefixUnaryExpression
                                                                (postfixUnaryExpression
                                                                  (primaryExpression
                                                                    (literalConstant
                                                                      (IntegerLiteral))))))))))))))))))
                                    (RPAREN))
                                  (WS)
                                  (annotated_lambda
                                    (lambda_literal
                                      (NLS)
                                      (WS)
                                      (statements
                                        (expression
                                          (disjunction
                                            (conjunction
                                              (equality
                                                (comparison
                                                  (infixOperation
                                                    (elvisExpression
                                                      (infixFunctionCall
                                                        (rangeExpression
                                                          (additiveExpression
                                                            (multiplicativeExpression
                                                              (asExpression
                                                                (prefixUnaryExpression
                                                                  (postfixUnaryExpression
                                                                    (primaryExpression
                                                                      (literalConstant
                                                                        (IntegerLiteral)))))))))))))))))
                                        (semis
                                          (NLS))))))))))))))))))))))

==================
Properties with getters and setters
==================
x = 2
val x
    ;
    public get
val y = 5
    set (
    v
    )

    {
  field = v
    }
---

(source_file
  (assignment
    (directlyAssignableExpression
      (simpleIdentifier
        (Identifier)))
    (WS)
    (ASSIGNMENT)
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (literalConstant
                                    (IntegerLiteral))))))))))))))))))
  (semis
    (NLS))
  (property_declaration
    (WS)
    (variable_declaration
      (simpleIdentifier
        (Identifier)))
    (semi
      (NLS))
    (WS)
    (semi
      (NLS))
    (WS)
    (getter
      (modifiers
        (visibility_modifier
          (PUBLIC)))
      (WS)))
  (semis
    (NLS))
  (property_declaration
    (WS)
    (variable_declaration
      (simpleIdentifier
        (Identifier)))
    (WS)
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (literalConstant
                                    (IntegerLiteral)))))))))))))))))
    (semi
      (NLS))
    (WS)
    (setter
      (WS)
      (NLS)
      (WS)
      (parameterWithOptionalType
        (simpleIdentifier
          (Identifier)))
      (NLS)
      (WS)
      (NLS)
      (WS)
      (function_body
        (block
          (LCURL)
          (NLS)
          (WS)
          (statements
            (assignment
              (directlyAssignableExpression
                (simpleIdentifier
                  (FIELD)))
              (WS)
              (ASSIGNMENT)
              (WS)
              (expression
                (disjunction
                  (conjunction
                    (equality
                      (comparison
                        (infixOperation
                          (elvisExpression
                            (infixFunctionCall
                              (rangeExpression
                                (additiveExpression
                                  (multiplicativeExpression
                                    (asExpression
                                      (prefixUnaryExpression
                                        (postfixUnaryExpression
                                          (primaryExpression
                                            (simpleIdentifier
                                              (Identifier))))))))))))))))))
            (semis
              (NLS)))
          (WS)
          (RCURL))))))

==================
Confusing statement annotation
==================
@A (1) + 2
---

(source_file
  (annotation
    (singleAnnotation
      (AT_NO_WS)
      (unescaped_annotation
        (constructor_invocation
          (userType
            (simpleUserType
              (type_identifier
                (Identifier))))
          (WS)
          (valueArguments
            (LPAREN)
            (valueArgument
              (expression
                (disjunction
                  (conjunction
                    (equality
                      (comparison
                        (infixOperation
                          (elvisExpression
                            (infixFunctionCall
                              (rangeExpression
                                (additiveExpression
                                  (multiplicativeExpression
                                    (asExpression
                                      (prefixUnaryExpression
                                        (postfixUnaryExpression
                                          (primaryExpression
                                            (literalConstant
                                              (IntegerLiteral))))))))))))))))))
            (RPAREN))))))
  (WS)
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (unaryPrefix
                              (prefixUnaryOperator
                                (ADD)))
                            (WS)
                            (postfixUnaryExpression
                              (primaryExpression
                                (literalConstant
                                  (IntegerLiteral))))))))))))))))))

==================
Statement annotation
==================
@A() (1) + 2
---

(source_file
  (annotation
    (singleAnnotation
      (AT_NO_WS)
      (unescaped_annotation
        (constructor_invocation
          (userType
            (simpleUserType
              (type_identifier
                (Identifier))))
          (valueArguments
            (LPAREN)
            (RPAREN))))))
  (WS)
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (parenthesizedExpression
                                    (LPAREN)
                                    (expression
                                      (disjunction
                                        (conjunction
                                          (equality
                                            (comparison
                                              (infixOperation
                                                (elvisExpression
                                                  (infixFunctionCall
                                                    (rangeExpression
                                                      (additiveExpression
                                                        (multiplicativeExpression
                                                          (asExpression
                                                            (prefixUnaryExpression
                                                              (postfixUnaryExpression
                                                                (primaryExpression
                                                                  (literalConstant
                                                                    (IntegerLiteral)))))))))))))))))
                                    (RPAREN))))))))
                      (WS)
                      (additiveOperator
                        (ADD))
                      (WS)
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (literalConstant
                                  (IntegerLiteral))))))))))))))))))

==================
Expression annotation
==================
(@A() 1) + 2
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (parenthesizedExpression
                                    (LPAREN)
                                    (expression
                                      (disjunction
                                        (conjunction
                                          (equality
                                            (comparison
                                              (infixOperation
                                                (elvisExpression
                                                  (infixFunctionCall
                                                    (rangeExpression
                                                      (additiveExpression
                                                        (multiplicativeExpression
                                                          (asExpression
                                                            (prefixUnaryExpression
                                                              (unaryPrefix
                                                                (annotation
                                                                  (singleAnnotation
                                                                    (AT_NO_WS)
                                                                    (unescaped_annotation
                                                                      (constructor_invocation
                                                                        (userType
                                                                          (simpleUserType
                                                                            (type_identifier
                                                                              (Identifier))))
                                                                        (valueArguments
                                                                          (LPAREN)
                                                                          (RPAREN)))))))
                                                              (WS)
                                                              (postfixUnaryExpression
                                                                (primaryExpression
                                                                  (literalConstant
                                                                    (IntegerLiteral)))))))))))))))))
                                    (RPAREN))))))))
                      (WS)
                      (additiveOperator
                        (ADD))
                      (WS)
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (literalConstant
                                  (IntegerLiteral))))))))))))))))))

==================
Expression annotation without parenthesis
==================
(@A 1) + 2
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (parenthesizedExpression
                                    (LPAREN)
                                    (expression
                                      (disjunction
                                        (conjunction
                                          (equality
                                            (comparison
                                              (infixOperation
                                                (elvisExpression
                                                  (infixFunctionCall
                                                    (rangeExpression
                                                      (additiveExpression
                                                        (multiplicativeExpression
                                                          (asExpression
                                                            (prefixUnaryExpression
                                                              (unaryPrefix
                                                                (annotation
                                                                  (singleAnnotation
                                                                    (AT_NO_WS)
                                                                    (unescaped_annotation
                                                                      (userType
                                                                        (simpleUserType
                                                                          (type_identifier
                                                                            (Identifier))))))))
                                                              (WS)
                                                              (postfixUnaryExpression
                                                                (primaryExpression
                                                                  (literalConstant
                                                                    (IntegerLiteral)))))))))))))))))
                                    (RPAREN))))))))
                      (WS)
                      (additiveOperator
                        (ADD))
                      (WS)
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (literalConstant
                                  (IntegerLiteral))))))))))))))))))

==================
When expression
==================
when {
    true -> 2
    else -> null
}
when (x) {
  in 1..5 -> {
    return null
  }
  is Unit -> {
  }
}
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (when_expression
                                  (WS)
                                  (LCURL)
                                  (NLS)
                                  (WS)
                                  (when_entry
                                    (when_condition
                                      (expression
                                        (disjunction
                                          (conjunction
                                            (equality
                                              (comparison
                                                (infixOperation
                                                  (elvisExpression
                                                    (infixFunctionCall
                                                      (rangeExpression
                                                        (additiveExpression
                                                          (multiplicativeExpression
                                                            (asExpression
                                                              (prefixUnaryExpression
                                                                (postfixUnaryExpression
                                                                  (primaryExpression
                                                                    (literalConstant
                                                                      (BooleanLiteral))))))))))))))))))
                                    (WS)
                                    (WS)
                                    (control_structure_body
                                      (expression
                                        (disjunction
                                          (conjunction
                                            (equality
                                              (comparison
                                                (infixOperation
                                                  (elvisExpression
                                                    (infixFunctionCall
                                                      (rangeExpression
                                                        (additiveExpression
                                                          (multiplicativeExpression
                                                            (asExpression
                                                              (prefixUnaryExpression
                                                                (postfixUnaryExpression
                                                                  (primaryExpression
                                                                    (literalConstant
                                                                      (IntegerLiteral))))))))))))))))))
                                    (semi
                                      (NLS)))
                                  (WS)
                                  (when_entry
                                    (WS)
                                    (WS)
                                    (control_structure_body
                                      (expression
                                        (disjunction
                                          (conjunction
                                            (equality
                                              (comparison
                                                (infixOperation
                                                  (elvisExpression
                                                    (infixFunctionCall
                                                      (rangeExpression
                                                        (additiveExpression
                                                          (multiplicativeExpression
                                                            (asExpression
                                                              (prefixUnaryExpression
                                                                (postfixUnaryExpression
                                                                  (primaryExpression
                                                                    (literalConstant
                                                                      (NullLiteral))))))))))))))))))
                                    (semi
                                      (NLS)))
                                  (RCURL)))))))))))))))))
  (semis
    (NLS))
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (when_expression
                                  (WS)
                                  (when_subject
                                    (LPAREN)
                                    (expression
                                      (disjunction
                                        (conjunction
                                          (equality
                                            (comparison
                                              (infixOperation
                                                (elvisExpression
                                                  (infixFunctionCall
                                                    (rangeExpression
                                                      (additiveExpression
                                                        (multiplicativeExpression
                                                          (asExpression
                                                            (prefixUnaryExpression
                                                              (postfixUnaryExpression
                                                                (primaryExpression
                                                                  (simpleIdentifier
                                                                    (Identifier)))))))))))))))))
                                    (RPAREN))
                                  (WS)
                                  (LCURL)
                                  (NLS)
                                  (WS)
                                  (when_entry
                                    (when_condition
                                      (range_test
                                        (inOperator
                                          (IN))
                                        (WS)
                                        (expression
                                          (disjunction
                                            (conjunction
                                              (equality
                                                (comparison
                                                  (infixOperation
                                                    (elvisExpression
                                                      (infixFunctionCall
                                                        (rangeExpression
                                                          (rangeExpression
                                                            (additiveExpression
                                                              (multiplicativeExpression
                                                                (asExpression
                                                                  (prefixUnaryExpression
                                                                    (postfixUnaryExpression
                                                                      (primaryExpression
                                                                        (literalConstant
                                                                          (IntegerLiteral)))))))))
                                                          (RANGE)
                                                          (additiveExpression
                                                            (multiplicativeExpression
                                                              (asExpression
                                                                (prefixUnaryExpression
                                                                  (postfixUnaryExpression
                                                                    (primaryExpression
                                                                      (literalConstant
                                                                        (IntegerLiteral)))))))))))))))))))
                                    (WS)
                                    (WS)
                                    (control_structure_body
                                      (block
                                        (LCURL)
                                        (NLS)
                                        (WS)
                                        (statements
                                          (expression
                                            (disjunctionWithReturn
                                              (conjunctionWithReturn
                                                (equalityWithReturn
                                                  (comparisonWithReturn
                                                    (infixOperationWithReturn
                                                      (elvisExpressionWithReturn
                                                        (infixFunctionCallWithReturn
                                                          (rangeExpressionWithReturn
                                                            (additiveExpressionWithReturn
                                                              (multiplicativeExpressionWithReturn
                                                                (asExpressionWithReturn
                                                                  (prefixUnaryExpressionWithReturn
                                                                    (rightRecursiveExpression
                                                                      (jumpExpression
                                                                        (RETURN)
                                                                        (WS)
                                                                        (expression
                                                                          (disjunction
                                                                            (conjunction
                                                                              (equality
                                                                                (comparison
                                                                                  (infixOperation
                                                                                    (elvisExpression
                                                                                      (infixFunctionCall
                                                                                        (rangeExpression
                                                                                          (additiveExpression
                                                                                            (multiplicativeExpression
                                                                                              (asExpression
                                                                                                (prefixUnaryExpression
                                                                                                  (postfixUnaryExpression
                                                                                                    (primaryExpression
                                                                                                      (literalConstant
                                                                                                        (NullLiteral))))))))))))))))))))))))))))))))
                                          (semis
                                            (NLS)))
                                        (WS)
                                        (RCURL)))
                                    (semi
                                      (NLS)))
                                  (WS)
                                  (when_entry
                                    (when_condition
                                      (type_test
                                        (isOperator
                                          (IS))
                                        (WS)
                                        (expression
                                          (disjunction
                                            (conjunction
                                              (equality
                                                (comparison
                                                  (infixOperation
                                                    (elvisExpression
                                                      (infixFunctionCall
                                                        (rangeExpression
                                                          (additiveExpression
                                                            (multiplicativeExpression
                                                              (asExpression
                                                                (prefixUnaryExpression
                                                                  (postfixUnaryExpression
                                                                    (primaryExpression
                                                                      (simpleIdentifier
                                                                        (Identifier)))))))))))))))))))
                                    (WS)
                                    (WS)
                                    (control_structure_body
                                      (block
                                        (LCURL)
                                        (semis
                                          (NLS))
                                        (WS)
                                        (RCURL)))
                                    (semi
                                      (NLS)))
                                  (RCURL))))))))))))))))))

==================
Try expression
==================
try {
    null
} catch (e: E) {
    e.printStackTrace()
} finally {
    r = x(2)
}
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (try_expression
                                  (WS)
                                  (block
                                    (LCURL)
                                    (NLS)
                                    (WS)
                                    (statements
                                      (expression
                                        (disjunction
                                          (conjunction
                                            (equality
                                              (comparison
                                                (infixOperation
                                                  (elvisExpression
                                                    (infixFunctionCall
                                                      (rangeExpression
                                                        (additiveExpression
                                                          (multiplicativeExpression
                                                            (asExpression
                                                              (prefixUnaryExpression
                                                                (postfixUnaryExpression
                                                                  (primaryExpression
                                                                    (literalConstant
                                                                      (NullLiteral)))))))))))))))))
                                      (semis
                                        (NLS)))
                                    (RCURL))
                                  (WS)
                                  (catch_block
                                    (WS)
                                    (LPAREN)
                                    (simple_identifier
                                      (simpleIdentifier
                                        (Identifier)))
                                    (COLON)
                                    (WS)
                                    (type
                                      (typeReference
                                        (userType
                                          (simpleUserType
                                            (type_identifier
                                              (Identifier))))))
                                    (RPAREN)
                                    (WS)
                                    (block
                                      (LCURL)
                                      (NLS)
                                      (WS)
                                      (statements
                                        (expression
                                          (disjunction
                                            (conjunction
                                              (equality
                                                (comparison
                                                  (infixOperation
                                                    (elvisExpression
                                                      (infixFunctionCall
                                                        (rangeExpression
                                                          (additiveExpression
                                                            (multiplicativeExpression
                                                              (asExpression
                                                                (prefixUnaryExpression
                                                                  (postfixUnaryExpression
                                                                    (primaryExpression
                                                                      (simpleIdentifier
                                                                        (Identifier)))
                                                                    (postfixUnarySuffix
                                                                      (navigationSuffix
                                                                        (memberAccessOperator
                                                                          (DOT))
                                                                        (simpleIdentifier
                                                                          (Identifier))))
                                                                    (postfixUnarySuffix
                                                                      (callSuffix
                                                                        (valueArguments
                                                                          (LPAREN)
                                                                          (RPAREN))))))))))))))))))
                                        (semis
                                          (NLS)))
                                      (RCURL)))
                                  (WS)
                                  (finally_block
                                    (WS)
                                    (block
                                      (LCURL)
                                      (NLS)
                                      (WS)
                                      (statements
                                        (assignment
                                          (directlyAssignableExpression
                                            (simpleIdentifier
                                              (Identifier)))
                                          (WS)
                                          (ASSIGNMENT)
                                          (WS)
                                          (expression
                                            (disjunction
                                              (conjunction
                                                (equality
                                                  (comparison
                                                    (infixOperation
                                                      (elvisExpression
                                                        (infixFunctionCall
                                                          (rangeExpression
                                                            (additiveExpression
                                                              (multiplicativeExpression
                                                                (asExpression
                                                                  (prefixUnaryExpression
                                                                    (postfixUnaryExpression
                                                                      (primaryExpression
                                                                        (simpleIdentifier
                                                                          (Identifier)))
                                                                      (postfixUnarySuffix
                                                                        (callSuffix
                                                                          (valueArguments
                                                                            (LPAREN)
                                                                            (valueArgument
                                                                              (expression
                                                                                (disjunction
                                                                                  (conjunction
                                                                                    (equality
                                                                                      (comparison
                                                                                        (infixOperation
                                                                                          (elvisExpression
                                                                                            (infixFunctionCall
                                                                                              (rangeExpression
                                                                                                (additiveExpression
                                                                                                  (multiplicativeExpression
                                                                                                    (asExpression
                                                                                                      (prefixUnaryExpression
                                                                                                        (postfixUnaryExpression
                                                                                                          (primaryExpression
                                                                                                            (literalConstant
                                                                                                              (IntegerLiteral))))))))))))))))))
                                                                            (RPAREN)))))))))))))))))))
                                        (semis
                                          (NLS)))
                                      (RCURL))))))))))))))))))))

