==================
Top-level functions
==================
fun main() {}
---

(source_file 
  (function_declaration 
    (WS )
    (simple_identifier 
      (simpleIdentifier 
        (Identifier )))
    (WS )
    (function_body )))

==================
Generic functions
==================
<T> fun test() {}
---

(source_file 
  (function_declaration 
    (type_parameters 
      (LANGLE )
      (type_parameter 
        (type_identifier 
          (simpleIdentifier 
            (Identifier ))))
      (RANGLE ))
    (WS )
    (WS )
    (simple_identifier 
      (simpleIdentifier 
        (Identifier )))
    (WS )
    (function_body )))

==================
Functions with parameters
==================
fun main(args: Array<String>) {}

fun sum(a: Int, b: Int) = a + b
---

(source_file 
  (function_declaration 
    (WS )
    (simple_identifier 
      (simpleIdentifier 
        (Identifier )))
    (parameter 
      (simpleIdentifier 
        (Identifier ))
      (COLON )
      (WS )
      (type 
        (typeReference 
          (userType 
            (simpleUserType 
              (simpleIdentifier 
                (Identifier ))
              (typeArguments 
                (LANGLE )
                (typeProjection 
                  (type 
                    (typeReference 
                      (userType 
                        (simpleUserType 
                          (simpleIdentifier 
                            (Identifier )))))))
                (RANGLE )))))))
    (WS )
    (function_body ))
  (semis 
    (NLS ))
  (function_declaration 
    (WS )
    (simple_identifier 
      (simpleIdentifier 
        (Identifier )))
    (parameter 
      (simpleIdentifier 
        (Identifier ))
      (COLON )
      (WS )
      (type 
        (typeReference 
          (userType 
            (simpleUserType 
              (simpleIdentifier 
                (Identifier )))))))
    (WS )
    (parameter 
      (simpleIdentifier 
        (Identifier ))
      (COLON )
      (WS )
      (type 
        (typeReference 
          (userType 
            (simpleUserType 
              (simpleIdentifier 
                (Identifier )))))))
    (WS )
    (function_body 
      (WS )
      (expression 
        (disjunction 
          (conjunction 
            (equality 
              (comparison 
                (infixOperation 
                  (elvisExpression 
                    (infixFunctionCall 
                      (rangeExpression 
                        (additiveExpression 
                          (multiplicativeExpression 
                            (asExpression 
                              (prefixUnaryExpression 
                                (postfixUnaryExpression 
                                  (primaryExpression 
                                    (simpleIdentifier 
                                      (Identifier )))))))
                          (WS )
                          (additiveOperator 
                            (ADD ))
                          (WS )
                          (multiplicativeExpression 
                            (asExpression 
                              (prefixUnaryExpression 
                                (postfixUnaryExpression 
                                  (primaryExpression 
                                    (simpleIdentifier 
                                      (Identifier ))))))))))))))))))))

==================
Functions with return types
==================
fun answerToTheUltimateQuestionOfLifeTheUniverseAndEverything(): Int = 42
---

(source_file 
  (function_declaration 
    (WS )
    (simple_identifier 
      (simpleIdentifier 
        (Identifier )))
    (WS )
    (type 
      (typeReference 
        (userType 
          (simpleUserType 
            (simpleIdentifier 
              (Identifier ))))))
    (WS )
    (function_body 
      (WS )
      (expression 
        (disjunction 
          (conjunction 
            (equality 
              (comparison 
                (infixOperation 
                  (elvisExpression 
                    (infixFunctionCall 
                      (rangeExpression 
                        (additiveExpression 
                          (multiplicativeExpression 
                            (asExpression 
                              (prefixUnaryExpression 
                                (postfixUnaryExpression 
                                  (primaryExpression 
                                    (literalConstant 
                                      (IntegerLiteral ))))))))))))))))))))

