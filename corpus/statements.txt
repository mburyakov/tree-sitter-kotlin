==================
For statements
==================
for (value in values) {}
---

(source_file
  (for_statement
    (WS)
    (LPAREN)
    (variable_declaration
      (simpleIdentifier
        (Identifier)))
    (WS)
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (simpleIdentifier
                                    (Identifier)))))))))))))))))
    (RPAREN)
    (WS)
    (control_structure_body
      (block
        (LCURL)
        (RCURL)))))

==================
Assignment
==================
x=2
((1+2)[c]) = x
---

(source_file
  (assignment
    (directlyAssignableExpression
      (simpleIdentifier
        (Identifier)))
    (ASSIGNMENT)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (literalConstant
                                    (IntegerLiteral))))))))))))))))))
  (semis
    (NLS))
  (assignment
    (directlyAssignableExpression
      (parenthesizedDirectlyAssignableExpression
        (LPAREN)
        (directlyAssignableExpression
          (postfixUnaryExpression
            (primaryExpression
              (parenthesizedExpression
                (LPAREN)
                (expression
                  (disjunction
                    (conjunction
                      (equality
                        (comparison
                          (infixOperation
                            (elvisExpression
                              (infixFunctionCall
                                (rangeExpression
                                  (additiveExpression
                                    (additiveExpression
                                      (multiplicativeExpression
                                        (asExpression
                                          (prefixUnaryExpression
                                            (postfixUnaryExpression
                                              (primaryExpression
                                                (literalConstant
                                                  (IntegerLiteral))))))))
                                    (additiveOperator
                                      (ADD))
                                    (multiplicativeExpression
                                      (asExpression
                                        (prefixUnaryExpression
                                          (postfixUnaryExpression
                                            (primaryExpression
                                              (literalConstant
                                                (IntegerLiteral)))))))))))))))))
                (RPAREN))))
          (assignableSuffix
            (indexingSuffix
              (LSQUARE)
              (expression
                (disjunction
                  (conjunction
                    (equality
                      (comparison
                        (infixOperation
                          (elvisExpression
                            (infixFunctionCall
                              (rangeExpression
                                (additiveExpression
                                  (multiplicativeExpression
                                    (asExpression
                                      (prefixUnaryExpression
                                        (postfixUnaryExpression
                                          (primaryExpression
                                            (simpleIdentifier
                                              (Identifier)))))))))))))))))
              (RSQUARE))))
        (RPAREN)))
    (WS)
    (ASSIGNMENT)
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (simpleIdentifier
                                    (Identifier)))))))))))))))))))

==================
Assignment with operator
==================
++x += 5
"r" += "d"
---

(source_file
  (assignment
    (assignableExpression
      (prefixUnaryExpression
        (unaryPrefix
          (prefixUnaryOperator
            (INCR)))
        (postfixUnaryExpression
          (primaryExpression
            (simpleIdentifier
              (Identifier))))))
    (WS)
    (assignmentAndOperator)
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (literalConstant
                                    (IntegerLiteral))))))))))))))))))
  (semis
    (NLS))
  (assignment
    (assignableExpression
      (prefixUnaryExpression
        (postfixUnaryExpression
          (primaryExpression
            (stringLiteral
              (lineStringLiteral
                (lineStringContent
                  (LineStrText))))))))
    (WS)
    (assignmentAndOperator)
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (stringLiteral
                                    (lineStringLiteral
                                      (lineStringContent
                                        (LineStrText)))))))))))))))))))))

==================
Return expression
==================
1 + return x + 3
---

(source_file
  (expression
    (disjunctionWithReturn
      (conjunctionWithReturn
        (equalityWithReturn
          (comparisonWithReturn
            (infixOperationWithReturn
              (elvisExpressionWithReturn
                (infixFunctionCallWithReturn
                  (rangeExpressionWithReturn
                    (additiveExpressionWithReturn
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (literalConstant
                                    (IntegerLiteral))))))))
                      (WS)
                      (additiveOperator
                        (ADD))
                      (WS)
                      (rightRecursiveExpression
                        (jumpExpression
                          (RETURN)
                          (WS)
                          (expression
                            (disjunction
                              (conjunction
                                (equality
                                  (comparison
                                    (infixOperation
                                      (elvisExpression
                                        (infixFunctionCall
                                          (rangeExpression
                                            (additiveExpression
                                              (additiveExpression
                                                (multiplicativeExpression
                                                  (asExpression
                                                    (prefixUnaryExpression
                                                      (postfixUnaryExpression
                                                        (primaryExpression
                                                          (simpleIdentifier
                                                            (Identifier))))))))
                                              (WS)
                                              (additiveOperator
                                                (ADD))
                                              (WS)
                                              (multiplicativeExpression
                                                (asExpression
                                                  (prefixUnaryExpression
                                                    (postfixUnaryExpression
                                                      (primaryExpression
                                                        (literalConstant
                                                          (IntegerLiteral))))))))))))))))))))))))))))))

==================
Blocks conflicting with lambdas
==================
do { } while (true)
---

(source_file
  (do_while_statement
    (WS)
    (control_structure_body
      (block
        (LCURL)
        (WS)
        (RCURL)))
    (WS)
    (WS)
    (LPAREN)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (literalConstant
                                    (BooleanLiteral)))))))))))))))))
    (RPAREN)))

==================
Dangling while 1
==================
do while (true); ;
while (true);
---

(source_file
  (do_while_statement
    (WS)
    (WS)
    (LPAREN)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (literalConstant
                                    (BooleanLiteral)))))))))))))))))
    (RPAREN))
  (semis
    (WS)
    (NLS))
  (while_statement
    (WS)
    (LPAREN)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (literalConstant
                                    (BooleanLiteral)))))))))))))))))
    (RPAREN)))

==================
Dangling while 2
==================
do while (true);
while (true);
---

(source_file
  (do_while_statement
    (WS)
    (WS)
    (LPAREN)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (literalConstant
                                    (BooleanLiteral)))))))))))))))))
    (RPAREN))
  (semis
    (NLS))
  (while_statement
    (WS)
    (LPAREN)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (literalConstant
                                    (BooleanLiteral)))))))))))))))))
    (RPAREN)))

==================
Dangling while 3
==================
do { while (true); }
while (true);
---

(source_file
  (do_while_statement
    (WS)
    (control_structure_body
      (block
        (LCURL)
        (WS)
        (statements
          (while_statement
            (WS)
            (LPAREN)
            (expression
              (disjunction
                (conjunction
                  (equality
                    (comparison
                      (infixOperation
                        (elvisExpression
                          (infixFunctionCall
                            (rangeExpression
                              (additiveExpression
                                (multiplicativeExpression
                                  (asExpression
                                    (prefixUnaryExpression
                                      (postfixUnaryExpression
                                        (primaryExpression
                                          (literalConstant
                                            (BooleanLiteral)))))))))))))))))
            (RPAREN)))
        (WS)
        (RCURL)))
    (NLS)
    (WS)
    (LPAREN)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (literalConstant
                                    (BooleanLiteral)))))))))))))))))
    (RPAREN))
  (semis))

