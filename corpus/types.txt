==================
Type references
==================
something as Int
something as A
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (typeReference
                              (userType
                                (simpleUserType
                                  (type_identifier
                                    (Identifier))))))))))))))))))
  (semis
    (NLS))
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (typeReference
                              (userType
                                (simpleUserType
                                  (type_identifier
                                    (Identifier)))))))))))))))))))

==================
Nested types
==================
something as Some.NestedType
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (typeReference
                              (userType
                                (userType
                                  (simpleUserType
                                    (type_identifier
                                      (Identifier))))
                                (DOT)
                                (simpleUserType
                                  (type_identifier
                                    (Identifier)))))))))))))))))))

==================
Deeply nested types
==================
somethingElse as A.Deeply.Nested.Type
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (typeReference
                              (userType
                                (userType
                                  (userType
                                    (userType
                                      (simpleUserType
                                        (type_identifier
                                          (Identifier))))
                                    (DOT)
                                    (simpleUserType
                                      (type_identifier
                                        (Identifier))))
                                  (DOT)
                                  (simpleUserType
                                    (type_identifier
                                      (Identifier))))
                                (DOT)
                                (simpleUserType
                                  (type_identifier
                                    (Identifier)))))))))))))))))))

==================
Generic wildcard types
==================
something as Generic<*>
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (typeReference
                              (userType
                                (simpleUserType
                                  (type_identifier
                                    (Identifier))
                                  (typeArguments
                                    (LANGLE)
                                    (typeProjection
                                      (MULT))
                                    (RANGLE)))))))))))))))))))

==================
Generic parameterized types
==================
something as Generic<T>
something as Generic<A, Type>
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (typeReference
                              (userType
                                (simpleUserType
                                  (type_identifier
                                    (Identifier))
                                  (typeArguments
                                    (LANGLE)
                                    (typeProjection
                                      (type
                                        (typeReference
                                          (userType
                                            (simpleUserType
                                              (type_identifier
                                                (Identifier)))))))
                                    (RANGLE))))))))))))))))))
  (semis
    (NLS))
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (typeReference
                              (userType
                                (simpleUserType
                                  (type_identifier
                                    (Identifier))
                                  (typeArguments
                                    (LANGLE)
                                    (typeProjection
                                      (type
                                        (typeReference
                                          (userType
                                            (simpleUserType
                                              (type_identifier
                                                (Identifier)))))))
                                    (COMMA)
                                    (WS)
                                    (typeProjection
                                      (type
                                        (typeReference
                                          (userType
                                            (simpleUserType
                                              (type_identifier
                                                (Identifier)))))))
                                    (RANGLE)))))))))))))))))))

==================
Function types
==================
unitFunction as () -> Unit
consumer as (Int) -> Unit
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (functionType
                              (functionTypeParameters
                                (LPAREN)
                                (RPAREN))
                              (WS)
                              (ARROW)
                              (WS)
                              (type
                                (typeReference
                                  (userType
                                    (simpleUserType
                                      (type_identifier
                                        (Identifier))))))))))))))))))))
  (semis
    (NLS))
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (functionType
                              (functionTypeParameters
                                (LPAREN)
                                (type
                                  (typeReference
                                    (userType
                                      (simpleUserType
                                        (type_identifier
                                          (Identifier))))))
                                (RPAREN))
                              (WS)
                              (ARROW)
                              (WS)
                              (type
                                (typeReference
                                  (userType
                                    (simpleUserType
                                      (type_identifier
                                        (Identifier)))))))))))))))))))))

==================
Function types with multiple parameters
==================
a as (Int, Generic<*>, Boolean) -> Unit
b as (Nested.Type, (Int)) -> Unit
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (functionType
                              (functionTypeParameters
                                (LPAREN)
                                (type
                                  (typeReference
                                    (userType
                                      (simpleUserType
                                        (type_identifier
                                          (Identifier))))))
                                (COMMA)
                                (WS)
                                (type
                                  (typeReference
                                    (userType
                                      (simpleUserType
                                        (type_identifier
                                          (Identifier))
                                        (typeArguments
                                          (LANGLE)
                                          (typeProjection
                                            (MULT))
                                          (RANGLE))))))
                                (COMMA)
                                (WS)
                                (type
                                  (typeReference
                                    (userType
                                      (simpleUserType
                                        (type_identifier
                                          (Identifier))))))
                                (RPAREN))
                              (WS)
                              (ARROW)
                              (WS)
                              (type
                                (typeReference
                                  (userType
                                    (simpleUserType
                                      (type_identifier
                                        (Identifier))))))))))))))))))))
  (semis
    (NLS))
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (functionType
                              (functionTypeParameters
                                (LPAREN)
                                (type
                                  (typeReference
                                    (userType
                                      (userType
                                        (simpleUserType
                                          (type_identifier
                                            (Identifier))))
                                      (DOT)
                                      (simpleUserType
                                        (type_identifier
                                          (Identifier))))))
                                (COMMA)
                                (WS)
                                (type
                                  (parenthesizedType
                                    (LPAREN)
                                    (type
                                      (typeReference
                                        (userType
                                          (simpleUserType
                                            (type_identifier
                                              (Identifier))))))
                                    (RPAREN)))
                                (RPAREN))
                              (WS)
                              (ARROW)
                              (WS)
                              (type
                                (typeReference
                                  (userType
                                    (simpleUserType
                                      (type_identifier
                                        (Identifier)))))))))))))))))))))

==================
Function types with named parameters
==================
a as (first: A, second: B) -> Unit
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (functionType
                              (functionTypeParameters
                                (LPAREN)
                                (parameter
                                  (simpleIdentifier
                                    (Identifier))
                                  (COLON)
                                  (WS)
                                  (type
                                    (typeReference
                                      (userType
                                        (simpleUserType
                                          (type_identifier
                                            (Identifier)))))))
                                (COMMA)
                                (WS)
                                (parameter
                                  (simpleIdentifier
                                    (Identifier))
                                  (COLON)
                                  (WS)
                                  (type
                                    (typeReference
                                      (userType
                                        (simpleUserType
                                          (type_identifier
                                            (Identifier)))))))
                                (RPAREN))
                              (WS)
                              (ARROW)
                              (WS)
                              (type
                                (typeReference
                                  (userType
                                    (simpleUserType
                                      (type_identifier
                                        (Identifier)))))))))))))))))))))

==================
Function types with receiver
==================
a as T.() -> Unit
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (functionType
                              (receiverTypeWithDot
                                (receiverType
                                  (typeReference
                                    (userType
                                      (simpleUserType
                                        (type_identifier
                                          (Identifier))))))
                                (DOT))
                              (functionTypeParameters
                                (LPAREN)
                                (RPAREN))
                              (WS)
                              (ARROW)
                              (WS)
                              (type
                                (typeReference
                                  (userType
                                    (simpleUserType
                                      (type_identifier
                                        (Identifier)))))))))))))))))))))

==================
Callable reference
==================
Int::toString
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (callableReference
                                  (receiverType
                                    (typeReference
                                      (userType
                                        (simpleUserType
                                          (type_identifier
                                            (Identifier))))))
                                  (COLONCOLON)
                                  (simpleIdentifier
                                    (Identifier)))))))))))))))))))

==================
Callable reference for nullable type
==================
Int?::toString
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (callableReference
                                  (typeReference
                                    (userType
                                      (simpleUserType
                                        (type_identifier
                                          (Identifier)))))
                                  (nullableCallable)
                                  (simpleIdentifier
                                    (Identifier)))))))))))))))))))

==================
Callable reference for nullable type
==================
(1+2)::toString
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (parenthesizedExpression
                                  (LPAREN)
                                  (expression
                                    (disjunction
                                      (conjunction
                                        (equality
                                          (comparison
                                            (infixOperation
                                              (elvisExpression
                                                (infixFunctionCall
                                                  (rangeExpression
                                                    (additiveExpression
                                                      (additiveExpression
                                                        (multiplicativeExpression
                                                          (asExpression
                                                            (prefixUnaryExpression
                                                              (postfixUnaryExpression
                                                                (primaryExpression
                                                                  (literalConstant
                                                                    (IntegerLiteral))))))))
                                                      (additiveOperator
                                                        (ADD))
                                                      (multiplicativeExpression
                                                        (asExpression
                                                          (prefixUnaryExpression
                                                            (postfixUnaryExpression
                                                              (primaryExpression
                                                                (literalConstant
                                                                  (IntegerLiteral)))))))))))))))))
                                  (RPAREN)))
                              (postfixUnarySuffix
                                (navigationSuffix
                                  (memberAccessOperator
                                    (COLONCOLON))
                                  (simpleIdentifier
                                    (Identifier)))))))))))))))))))

==================
Nullable dynamic type
==================
val x: dynamic? = null
---

(source_file
  (property_declaration
    (WS)
    (variable_declaration
      (simpleIdentifier
        (Identifier))
      (WS)
      (type
        (nullableType
          (typeReference
            (DYNAMIC))
          (quest
            (NLSQUEST)))))
    (WS)
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (literalConstant
                                    (NullLiteral)))))))))))))))))))

==================
Comparisons
==================
1<2
2==1
4 > 5+3
x<y
x<y+1
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (literalConstant
                                  (IntegerLiteral))))))))))))
            (comparisonOperator
              (LANGLE))
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (literalConstant
                                  (IntegerLiteral)))))))))))))))))
  (semis
    (NLS))
  (expression
    (disjunction
      (conjunction
        (equality
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (literalConstant
                                    (IntegerLiteral))))))))))))))
          (equalityOperator
            (EQEQ))
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (literalConstant
                                  (IntegerLiteral)))))))))))))))))
  (semis
    (NLS))
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (literalConstant
                                  (IntegerLiteral))))))))))))
            (WS)
            (comparisonOperator
              (RANGLE))
            (WS)
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (literalConstant
                                    (IntegerLiteral))))))))
                      (additiveOperator
                        (ADD))
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (literalConstant
                                  (IntegerLiteral)))))))))))))))))
  (semis
    (NLS))
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier))))))))))))
            (comparisonOperator
              (LANGLE))
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))))))))))))))
  (semis
    (NLS))
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier))))))))))))
            (comparisonOperator
              (LANGLE))
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (simpleIdentifier
                                    (Identifier))))))))
                      (additiveOperator
                        (ADD))
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (literalConstant
                                  (IntegerLiteral))))))))))))))))))

==================
Generic method call
==================
meth<Int>()
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))
                              (postfixUnarySuffix
                                (typeArguments
                                  (LANGLE)
                                  (typeProjection
                                    (type
                                      (typeReference
                                        (userType
                                          (simpleUserType
                                            (type_identifier
                                              (Identifier)))))))
                                  (RANGLE)))
                              (postfixUnarySuffix
                                (callSuffix
                                  (valueArguments
                                    (LPAREN)
                                    (RPAREN)))))))))))))))))))

==================
Qualified type with receiver
==================
val c = f as kotlin.Int?.() -> Int
---

(source_file
  (property_declaration
    (WS)
    (variable_declaration
      (simpleIdentifier
        (Identifier)))
    (WS)
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (simpleIdentifier
                                    (Identifier)))))
                            (WS)
                            (asOperator
                              (AS))
                            (WS)
                            (type
                              (functionType
                                (receiverTypeWithDot
                                  (receiverType
                                    (nullableType
                                      (typeReference
                                        (userType
                                          (userType
                                            (simpleUserType
                                              (type_identifier
                                                (Identifier))))
                                          (DOT)
                                          (simpleUserType
                                            (type_identifier
                                              (Identifier)))))
                                      (quest
                                        (NLSQUEST))))
                                  (DOT))
                                (functionTypeParameters
                                  (LPAREN)
                                  (RPAREN))
                                (WS)
                                (ARROW)
                                (WS)
                                (type
                                  (typeReference
                                    (userType
                                      (simpleUserType
                                        (type_identifier
                                          (Identifier))))))))))))))))))))))

==================
Parametrized qualified type
==================
val kFunction0: () -> Int? = c.Inner(4)::method
val methodRef: (Outer<Int>.Inner) -> Int? = pckg.Outer<Int>.Inner::method
---

(source_file
  (property_declaration
    (WS)
    (variable_declaration
      (simpleIdentifier
        (Identifier))
      (WS)
      (type
        (functionType
          (functionTypeParameters
            (LPAREN)
            (RPAREN))
          (WS)
          (ARROW)
          (WS)
          (type
            (nullableType
              (typeReference
                (userType
                  (simpleUserType
                    (type_identifier
                      (Identifier)))))
              (quest
                (NLSQUEST)))))))
    (WS)
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (simpleIdentifier
                                    (Identifier)))
                                (postfixUnarySuffix
                                  (navigationSuffix
                                    (memberAccessOperator
                                      (DOT))
                                    (simpleIdentifier
                                      (Identifier))))
                                (postfixUnarySuffix
                                  (callSuffix
                                    (valueArguments
                                      (LPAREN)
                                      (valueArgument
                                        (expression
                                          (disjunction
                                            (conjunction
                                              (equality
                                                (comparison
                                                  (infixOperation
                                                    (elvisExpression
                                                      (infixFunctionCall
                                                        (rangeExpression
                                                          (additiveExpression
                                                            (multiplicativeExpression
                                                              (asExpression
                                                                (prefixUnaryExpression
                                                                  (postfixUnaryExpression
                                                                    (primaryExpression
                                                                      (literalConstant
                                                                        (IntegerLiteral))))))))))))))))))
                                      (RPAREN))))
                                (postfixUnarySuffix
                                  (navigationSuffix
                                    (memberAccessOperator
                                      (COLONCOLON))
                                    (simpleIdentifier
                                      (Identifier)))))))))))))))))))
  (semis
    (NLS))
  (property_declaration
    (WS)
    (variable_declaration
      (simpleIdentifier
        (Identifier))
      (WS)
      (type
        (functionType
          (functionTypeParameters
            (LPAREN)
            (type
              (typeReference
                (userType
                  (userType
                    (simpleUserType
                      (type_identifier
                        (Identifier))
                      (typeArguments
                        (LANGLE)
                        (typeProjection
                          (type
                            (typeReference
                              (userType
                                (simpleUserType
                                  (type_identifier
                                    (Identifier)))))))
                        (RANGLE))))
                  (DOT)
                  (simpleUserType
                    (type_identifier
                      (Identifier))))))
            (RPAREN))
          (WS)
          (ARROW)
          (WS)
          (type
            (nullableType
              (typeReference
                (userType
                  (simpleUserType
                    (type_identifier
                      (Identifier)))))
              (quest
                (NLSQUEST)))))))
    (WS)
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (callableReference
                                    (receiverType
                                      (typeReference
                                        (userType
                                          (userType
                                            (userType
                                              (simpleUserType
                                                (type_identifier
                                                  (Identifier))))
                                            (DOT)
                                            (simpleUserType
                                              (type_identifier
                                                (Identifier))
                                              (typeArguments
                                                (LANGLE)
                                                (typeProjection
                                                  (type
                                                    (typeReference
                                                      (userType
                                                        (simpleUserType
                                                          (type_identifier
                                                            (Identifier)))))))
                                                (RANGLE))))
                                          (DOT)
                                          (simpleUserType
                                            (type_identifier
                                              (Identifier))))))
                                    (COLONCOLON)
                                    (simpleIdentifier
                                      (Identifier))))))))))))))))))))

==================
Type alias
==================
typealias AliasSet<Item> = io.lacuna.bifurcan.Set<Item>
---

(source_file
  (type_alias
    (WS)
    (type_identifier
      (Identifier))
    (type_parameters
      (LANGLE)
      (type_parameter
        (type_identifier
          (Identifier)))
      (RANGLE))
    (WS)
    (WS)
    (type
      (typeReference
        (userType
          (userType
            (userType
              (userType
                (simpleUserType
                  (type_identifier
                    (Identifier))))
              (DOT)
              (simpleUserType
                (type_identifier
                  (Identifier))))
            (DOT)
            (simpleUserType
              (type_identifier
                (Identifier))))
          (DOT)
          (simpleUserType
            (type_identifier
              (Identifier))
            (typeArguments
              (LANGLE)
              (typeProjection
                (type
                  (typeReference
                    (userType
                      (simpleUserType
                        (type_identifier
                          (Identifier)))))))
              (RANGLE))))))))

==================
Type parameter annotations
==================
val x: List<out @Ann T>
val x: List<out (@Ann T)>
---

(source_file
  (property_declaration
    (WS)
    (variable_declaration
      (simpleIdentifier
        (Identifier))
      (WS)
      (type
        (typeReference
          (userType
            (simpleUserType
              (type_identifier
                (Identifier))
              (typeArguments
                (LANGLE)
                (typeProjection
                  (typeProjectionModifiers
                    (typeProjectionModifier
                      (varianceModifier
                        (OUT)))
                    (typeProjectionModifier
                      (annotation
                        (singleAnnotation
                          (AT_PRE_WS)
                          (unescaped_annotation
                            (userType
                              (simpleUserType
                                (type_identifier
                                  (Identifier)))))))))
                  (WS)
                  (type
                    (typeReference
                      (userType
                        (simpleUserType
                          (type_identifier
                            (Identifier)))))))
                (RANGLE))))))))
  (semis
    (NLS))
  (property_declaration
    (WS)
    (variable_declaration
      (simpleIdentifier
        (Identifier))
      (WS)
      (type
        (typeReference
          (userType
            (simpleUserType
              (type_identifier
                (Identifier))
              (typeArguments
                (LANGLE)
                (typeProjection
                  (typeProjectionModifiers
                    (typeProjectionModifier
                      (varianceModifier
                        (OUT))))
                  (WS)
                  (type
                    (parenthesizedType
                      (LPAREN)
                      (type
                        (typeModifiers
                          (typeModifier
                            (annotation
                              (singleAnnotation
                                (AT_NO_WS)
                                (unescaped_annotation
                                  (userType
                                    (simpleUserType
                                      (type_identifier
                                        (Identifier)))))))))
                        (WS)
                        (typeReference
                          (userType
                            (simpleUserType
                              (type_identifier
                                (Identifier))))))
                      (RPAREN))))
                (RANGLE)))))))))

==================
Is operator and angle brackets
==================
if (x is C > false) {}
if (x is C<T> > false) {}
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))
                              (WS)
                              (postfixUnarySuffix
                                (callSuffix
                                  (valueArguments
                                    (LPAREN)
                                    (valueArgument
                                      (expression
                                        (disjunction
                                          (conjunction
                                            (equality
                                              (comparison
                                                (infixOperation
                                                  (infixOperation
                                                    (elvisExpression
                                                      (infixFunctionCall
                                                        (rangeExpression
                                                          (additiveExpression
                                                            (multiplicativeExpression
                                                              (asExpression
                                                                (prefixUnaryExpression
                                                                  (postfixUnaryExpression
                                                                    (primaryExpression
                                                                      (simpleIdentifier
                                                                        (Identifier))))))))))))
                                                  (WS)
                                                  (isOperator
                                                    (IS))
                                                  (WS)
                                                  (type
                                                    (typeReference
                                                      (userType
                                                        (simpleUserType
                                                          (type_identifier
                                                            (Identifier)))))))
                                                (WS)
                                                (comparisonOperator
                                                  (RANGLE))
                                                (WS)
                                                (infixOperation
                                                  (elvisExpression
                                                    (infixFunctionCall
                                                      (rangeExpression
                                                        (additiveExpression
                                                          (multiplicativeExpression
                                                            (asExpression
                                                              (prefixUnaryExpression
                                                                (postfixUnaryExpression
                                                                  (primaryExpression
                                                                    (literalConstant
                                                                      (BooleanLiteral))))))))))))))))))
                                    (RPAREN))
                                  (WS)
                                  (annotated_lambda
                                    (lambda_literal))))))))))))))))))
  (semis
    (NLS))
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))
                              (WS)
                              (postfixUnarySuffix
                                (callSuffix
                                  (valueArguments
                                    (LPAREN)
                                    (valueArgument
                                      (expression
                                        (disjunction
                                          (conjunction
                                            (equality
                                              (comparison
                                                (infixOperation
                                                  (infixOperation
                                                    (elvisExpression
                                                      (infixFunctionCall
                                                        (rangeExpression
                                                          (additiveExpression
                                                            (multiplicativeExpression
                                                              (asExpression
                                                                (prefixUnaryExpression
                                                                  (postfixUnaryExpression
                                                                    (primaryExpression
                                                                      (simpleIdentifier
                                                                        (Identifier))))))))))))
                                                  (WS)
                                                  (isOperator
                                                    (IS))
                                                  (WS)
                                                  (type
                                                    (typeReference
                                                      (userType
                                                        (simpleUserType
                                                          (type_identifier
                                                            (Identifier))
                                                          (typeArguments
                                                            (LANGLE)
                                                            (typeProjection
                                                              (type
                                                                (typeReference
                                                                  (userType
                                                                    (simpleUserType
                                                                      (type_identifier
                                                                        (Identifier)))))))
                                                            (RANGLE)))))))
                                                (WS)
                                                (comparisonOperator
                                                  (RANGLE))
                                                (WS)
                                                (infixOperation
                                                  (elvisExpression
                                                    (infixFunctionCall
                                                      (rangeExpression
                                                        (additiveExpression
                                                          (multiplicativeExpression
                                                            (asExpression
                                                              (prefixUnaryExpression
                                                                (postfixUnaryExpression
                                                                  (primaryExpression
                                                                    (literalConstant
                                                                      (BooleanLiteral))))))))))))))))))
                                    (RPAREN))
                                  (WS)
                                  (annotated_lambda
                                    (lambda_literal)))))))))))))))))))

==================
Confusing lambda parameter type
==================
l { a : (Int) -> Int -> a }
l { a : Int -> a }
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))
                              (WS)
                              (postfixUnarySuffix
                                (callSuffix
                                  (annotated_lambda
                                    (lambda_literal
                                      (WS)
                                      (lambda_parameters
                                        (variable_declaration
                                          (simpleIdentifier
                                            (Identifier))
                                          (WS)
                                          (WS)
                                          (type
                                            (functionType
                                              (functionTypeParameters
                                                (LPAREN)
                                                (type
                                                  (typeReference
                                                    (userType
                                                      (simpleUserType
                                                        (type_identifier
                                                          (Identifier))))))
                                                (RPAREN))
                                              (WS)
                                              (ARROW)
                                              (WS)
                                              (type
                                                (typeReference
                                                  (userType
                                                    (simpleUserType
                                                      (type_identifier
                                                        (Identifier))))))))))
                                      (WS)
                                      (WS)
                                      (statements
                                        (expression
                                          (disjunction
                                            (conjunction
                                              (equality
                                                (comparison
                                                  (infixOperation
                                                    (elvisExpression
                                                      (infixFunctionCall
                                                        (rangeExpression
                                                          (additiveExpression
                                                            (multiplicativeExpression
                                                              (asExpression
                                                                (prefixUnaryExpression
                                                                  (postfixUnaryExpression
                                                                    (primaryExpression
                                                                      (simpleIdentifier
                                                                        (Identifier))))))))))))))))))
                                      (WS)))))))))))))))))))
  (semis
    (NLS))
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))
                              (WS)
                              (postfixUnarySuffix
                                (callSuffix
                                  (annotated_lambda
                                    (lambda_literal
                                      (WS)
                                      (lambda_parameters
                                        (variable_declaration
                                          (simpleIdentifier
                                            (Identifier))
                                          (WS)
                                          (WS)
                                          (type
                                            (typeReference
                                              (userType
                                                (simpleUserType
                                                  (type_identifier
                                                    (Identifier))))))))
                                      (WS)
                                      (WS)
                                      (statements
                                        (expression
                                          (disjunction
                                            (conjunction
                                              (equality
                                                (comparison
                                                  (infixOperation
                                                    (elvisExpression
                                                      (infixFunctionCall
                                                        (rangeExpression
                                                          (additiveExpression
                                                            (multiplicativeExpression
                                                              (asExpression
                                                                (prefixUnaryExpression
                                                                  (postfixUnaryExpression
                                                                    (primaryExpression
                                                                      (simpleIdentifier
                                                                        (Identifier))))))))))))))))))
                                      (WS))))))))))))))))))))

