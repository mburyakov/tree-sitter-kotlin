==================
Type references
==================
something as Int
something as A
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (typeReference
                              (userType
                                (simpleUserType
                                  (simpleIdentifier
                                    (Identifier))))))))))))))))))
  (semis
    (NLS))
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (typeReference
                              (userType
                                (simpleUserType
                                  (simpleIdentifier
                                    (Identifier)))))))))))))))))))

==================
Nested types
==================
something as Some.NestedType
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (typeReference
                              (userType
                                (userTypeWithDot
                                  (userType
                                    (simpleUserType
                                      (simpleIdentifier
                                        (Identifier))))
                                  (DOT))
                                (simpleUserType
                                  (simpleIdentifier
                                    (Identifier)))))))))))))))))))

==================
Deeply nested types
==================
somethingElse as A.Deeply.Nested.Type
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (typeReference
                              (userType
                                (userTypeWithDot
                                  (userType
                                    (userTypeWithDot
                                      (userType
                                        (userTypeWithDot
                                          (userType
                                            (simpleUserType
                                              (simpleIdentifier
                                                (Identifier))))
                                          (DOT))
                                        (simpleUserType
                                          (simpleIdentifier
                                            (Identifier))))
                                      (DOT))
                                    (simpleUserType
                                      (simpleIdentifier
                                        (Identifier))))
                                  (DOT))
                                (simpleUserType
                                  (simpleIdentifier
                                    (Identifier)))))))))))))))))))

==================
Generic wildcard types
==================
something as Generic<*>
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (typeReference
                              (userType
                                (simpleUserType
                                  (simpleIdentifier
                                    (Identifier))
                                  (typeArguments
                                    (LANGLE)
                                    (typeProjection
                                      (MULT))
                                    (RANGLE)))))))))))))))))))

==================
Generic parameterized types
==================
something as Generic<T>
something as Generic<A, Type>
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (typeReference
                              (userType
                                (simpleUserType
                                  (simpleIdentifier
                                    (Identifier))
                                  (typeArguments
                                    (LANGLE)
                                    (typeProjection
                                      (type
                                        (typeReference
                                          (userType
                                            (simpleUserType
                                              (simpleIdentifier
                                                (Identifier)))))))
                                    (RANGLE))))))))))))))))))
  (semis
    (NLS))
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (typeReference
                              (userType
                                (simpleUserType
                                  (simpleIdentifier
                                    (Identifier))
                                  (typeArguments
                                    (LANGLE)
                                    (typeProjection
                                      (type
                                        (typeReference
                                          (userType
                                            (simpleUserType
                                              (simpleIdentifier
                                                (Identifier)))))))
                                    (COMMA)
                                    (WS)
                                    (typeProjection
                                      (type
                                        (typeReference
                                          (userType
                                            (simpleUserType
                                              (simpleIdentifier
                                                (Identifier)))))))
                                    (RANGLE)))))))))))))))))))

==================
Function types
==================
unitFunction as () -> Unit
consumer as (Int) -> Unit
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (functionType
                              (functionTypeParameters
                                (LPAREN)
                                (RPAREN))
                              (WS)
                              (ARROW)
                              (WS)
                              (type
                                (typeReference
                                  (userType
                                    (simpleUserType
                                      (simpleIdentifier
                                        (Identifier))))))))))))))))))))
  (semis
    (NLS))
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (functionType
                              (functionTypeParameters
                                (LPAREN)
                                (type
                                  (typeReference
                                    (userType
                                      (simpleUserType
                                        (simpleIdentifier
                                          (Identifier))))))
                                (RPAREN))
                              (WS)
                              (ARROW)
                              (WS)
                              (type
                                (typeReference
                                  (userType
                                    (simpleUserType
                                      (simpleIdentifier
                                        (Identifier)))))))))))))))))))))

==================
Function types with multiple parameters
==================
a as (Int, Generic<*>, Boolean) -> Unit
b as (Nested.Type, (Int)) -> Unit
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (functionType
                              (functionTypeParameters
                                (LPAREN)
                                (type
                                  (typeReference
                                    (userType
                                      (simpleUserType
                                        (simpleIdentifier
                                          (Identifier))))))
                                (COMMA)
                                (WS)
                                (type
                                  (typeReference
                                    (userType
                                      (simpleUserType
                                        (simpleIdentifier
                                          (Identifier))
                                        (typeArguments
                                          (LANGLE)
                                          (typeProjection
                                            (MULT))
                                          (RANGLE))))))
                                (COMMA)
                                (WS)
                                (type
                                  (typeReference
                                    (userType
                                      (simpleUserType
                                        (simpleIdentifier
                                          (Identifier))))))
                                (RPAREN))
                              (WS)
                              (ARROW)
                              (WS)
                              (type
                                (typeReference
                                  (userType
                                    (simpleUserType
                                      (simpleIdentifier
                                        (Identifier))))))))))))))))))))
  (semis
    (NLS))
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (functionType
                              (functionTypeParameters
                                (LPAREN)
                                (type
                                  (typeReference
                                    (userType
                                      (userTypeWithDot
                                        (userType
                                          (simpleUserType
                                            (simpleIdentifier
                                              (Identifier))))
                                        (DOT))
                                      (simpleUserType
                                        (simpleIdentifier
                                          (Identifier))))))
                                (COMMA)
                                (WS)
                                (type
                                  (parenthesizedType
                                    (LPAREN)
                                    (type
                                      (typeReference
                                        (userType
                                          (simpleUserType
                                            (simpleIdentifier
                                              (Identifier))))))
                                    (RPAREN)))
                                (RPAREN))
                              (WS)
                              (ARROW)
                              (WS)
                              (type
                                (typeReference
                                  (userType
                                    (simpleUserType
                                      (simpleIdentifier
                                        (Identifier)))))))))))))))))))))

==================
Function types with named parameters
==================
a as (first: A, second: B) -> Unit
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (functionType
                              (functionTypeParameters
                                (LPAREN)
                                (parameter
                                  (simpleIdentifier
                                    (Identifier))
                                  (COLON)
                                  (WS)
                                  (type
                                    (typeReference
                                      (userType
                                        (simpleUserType
                                          (simpleIdentifier
                                            (Identifier)))))))
                                (COMMA)
                                (WS)
                                (parameter
                                  (simpleIdentifier
                                    (Identifier))
                                  (COLON)
                                  (WS)
                                  (type
                                    (typeReference
                                      (userType
                                        (simpleUserType
                                          (simpleIdentifier
                                            (Identifier)))))))
                                (RPAREN))
                              (WS)
                              (ARROW)
                              (WS)
                              (type
                                (typeReference
                                  (userType
                                    (simpleUserType
                                      (simpleIdentifier
                                        (Identifier)))))))))))))))))))))

==================
Function types with receiver
==================
a as T.() -> Unit
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))
                          (WS)
                          (asOperator
                            (AS))
                          (WS)
                          (type
                            (functionType
                              (receiverTypeWithDot
                                (userTypeWithDot
                                  (userType
                                    (simpleUserType
                                      (simpleIdentifier
                                        (Identifier))))
                                  (DOT)))
                              (functionTypeParameters
                                (LPAREN)
                                (RPAREN))
                              (WS)
                              (ARROW)
                              (WS)
                              (type
                                (typeReference
                                  (userType
                                    (simpleUserType
                                      (simpleIdentifier
                                        (Identifier)))))))))))))))))))))

==================
Callable reference
==================
Int::toString
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (callableReference
                                  (receiverType
                                    (typeReference
                                      (userType
                                        (simpleUserType
                                          (simpleIdentifier
                                            (Identifier))))))
                                  (COLONCOLON)
                                  (simpleIdentifier
                                    (Identifier)))))))))))))))))))

==================
Callable reference for nullable type
==================
Int?::toString
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (callableReference
                                  (receiverType
                                    (typeReference
                                      (userType
                                        (simpleUserType
                                          (simpleIdentifier
                                            (Identifier)))))
                                    (quest
                                      (QUEST_NO_WS)))
                                  (COLONCOLON)
                                  (simpleIdentifier
                                    (Identifier)))))))))))))))))))

==================
Callable reference for nullable type
==================
(1+2)::toString
---
(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (parenthesizedExpression
                                  (LPAREN)
                                  (expression
                                    (disjunction
                                      (conjunction
                                        (equality
                                          (comparison
                                            (infixOperation
                                              (elvisExpression
                                                (infixFunctionCall
                                                  (rangeExpression
                                                    (additiveExpression
                                                      (multiplicativeExpression
                                                        (asExpression
                                                          (prefixUnaryExpression
                                                            (postfixUnaryExpression
                                                              (primaryExpression
                                                                (literalConstant
                                                                  (IntegerLiteral)))))))
                                                      (additiveOperator
                                                        (ADD))
                                                      (multiplicativeExpression
                                                        (asExpression
                                                          (prefixUnaryExpression
                                                            (postfixUnaryExpression
                                                              (primaryExpression
                                                                (literalConstant
                                                                  (IntegerLiteral)))))))))))))))))
                                  (RPAREN)))
                              (postfixUnarySuffix
                                (navigationSuffix
                                  (memberAccessOperator
                                    (COLONCOLON))
                                  (simpleIdentifier
                                    (Identifier)))))))))))))))))))

==================
Nullable dynamic type
==================
val x: dynamic? = null
---

(source_file
  (property_declaration
    (WS)
    (variable_declaration
      (simple_identifier
        (simpleIdentifier
          (Identifier)))
      (WS)
      (type
        (typeReference
          (DYNAMIC))
        (quest
          (QUEST_WS))))
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (literalConstant
                                    (NullLiteral)))))))))))))))))))

==================
Comparisons
==================
1<2
2==1
4 > 5+3
x<y
x<y+1
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (literalConstant
                                  (IntegerLiteral))))))))))))
            (comparisonOperator
              (LANGLE))
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (literalConstant
                                  (IntegerLiteral)))))))))))))))))
  (semis
    (NLS))
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (literalConstant
                                  (IntegerLiteral)))))))))))))
          (equalityOperator
            (EQEQ))
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (literalConstant
                                  (IntegerLiteral)))))))))))))))))
  (semis
    (NLS))
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (literalConstant
                                  (IntegerLiteral))))))))))))
            (WS)
            (comparisonOperator
              (RANGLE))
            (WS)
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (literalConstant
                                  (IntegerLiteral)))))))
                      (additiveOperator
                        (ADD))
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (literalConstant
                                  (IntegerLiteral)))))))))))))))))
  (semis
    (NLS))
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier))))))))))))
            (comparisonOperator
              (LANGLE))
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))))))))))))))
  (semis
    (NLS))
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier))))))))))))
            (comparisonOperator
              (LANGLE))
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))))))
                      (additiveOperator
                        (ADD))
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (literalConstant
                                  (IntegerLiteral))))))))))))))))))

==================
Generic method call
==================
meth<Int>()
---

(source_file
  (expression
    (disjunction
      (conjunction
        (equality
          (comparison
            (infixOperation
              (elvisExpression
                (infixFunctionCall
                  (rangeExpression
                    (additiveExpression
                      (multiplicativeExpression
                        (asExpression
                          (prefixUnaryExpression
                            (postfixUnaryExpression
                              (primaryExpression
                                (simpleIdentifier
                                  (Identifier)))
                              (postfixUnarySuffix
                                (callSuffix
                                  (typeArguments
                                    (LANGLE)
                                    (typeProjection
                                      (type
                                        (typeReference
                                          (userType
                                            (simpleUserType
                                              (simpleIdentifier
                                                (Identifier)))))))
                                    (RANGLE))
                                  (valueArguments
                                    (LPAREN)
                                    (RPAREN)))))))))))))))))))

==================
Qualified type with receiver
==================
val c = f as kotlin.Int?.() -> Int
---

(source_file
  (property_declaration
    (WS)
    (variable_declaration
      (simple_identifier
        (simpleIdentifier
          (Identifier))))
    (WS)
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (simpleIdentifier
                                    (Identifier)))))
                            (WS)
                            (asOperator
                              (AS))
                            (WS)
                            (type
                              (functionType
                                (receiverTypeWithDot
                                  (typeReference
                                    (userType
                                      (userTypeWithDot
                                        (userType
                                          (simpleUserType
                                            (simpleIdentifier
                                              (Identifier))))
                                        (DOT))
                                      (simpleUserType
                                        (simpleIdentifier
                                          (Identifier)))))
                                  (quest
                                    (QUEST_NO_WS))
                                  (DOT))
                                (functionTypeParameters
                                  (LPAREN)
                                  (RPAREN))
                                (WS)
                                (ARROW)
                                (WS)
                                (type
                                  (typeReference
                                    (userType
                                      (simpleUserType
                                        (simpleIdentifier
                                          (Identifier))))))))))))))))))))))

==================
Parametrized qualified type
==================
val kFunction0: () -> Int? = c.Inner(4)::method
val methodRef: (Outer<Int>.Inner) -> Int? = pckg.Outer<Int>.Inner::method
---

(source_file
  (property_declaration
    (WS)
    (variable_declaration
      (simple_identifier
        (simpleIdentifier
          (Identifier)))
      (WS)
      (type
        (functionType
          (functionTypeParameters
            (LPAREN)
            (RPAREN))
          (WS)
          (ARROW)
          (WS)
          (type
            (typeReference
              (userType
                (simpleUserType
                  (simpleIdentifier
                    (Identifier)))))
            (quest
              (QUEST_WS))))))
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (simpleIdentifier
                                    (Identifier)))
                                (postfixUnarySuffix
                                  (navigationSuffix
                                    (memberAccessOperator
                                      (DOT))
                                    (simpleIdentifier
                                      (Identifier))))
                                (postfixUnarySuffix
                                  (callSuffix
                                    (valueArguments
                                      (LPAREN)
                                      (valueArgument
                                        (expression
                                          (disjunction
                                            (conjunction
                                              (equality
                                                (comparison
                                                  (infixOperation
                                                    (elvisExpression
                                                      (infixFunctionCall
                                                        (rangeExpression
                                                          (additiveExpression
                                                            (multiplicativeExpression
                                                              (asExpression
                                                                (prefixUnaryExpression
                                                                  (postfixUnaryExpression
                                                                    (primaryExpression
                                                                      (literalConstant
                                                                        (IntegerLiteral))))))))))))))))))
                                      (RPAREN))))
                                (postfixUnarySuffix
                                  (navigationSuffix
                                    (memberAccessOperator
                                      (COLONCOLON))
                                    (simpleIdentifier
                                      (Identifier)))))))))))))))))))
  (semis
    (NLS))
  (property_declaration
    (WS)
    (variable_declaration
      (simple_identifier
        (simpleIdentifier
          (Identifier)))
      (WS)
      (type
        (functionType
          (functionTypeParameters
            (LPAREN)
            (type
              (typeReference
                (userType
                  (userTypeWithDot
                    (userType
                      (simpleUserType
                        (simpleIdentifier
                          (Identifier))
                        (typeArguments
                          (LANGLE)
                          (typeProjection
                            (type
                              (typeReference
                                (userType
                                  (simpleUserType
                                    (simpleIdentifier
                                      (Identifier)))))))
                          (RANGLE))))
                    (DOT))
                  (simpleUserType
                    (simpleIdentifier
                      (Identifier))))))
            (RPAREN))
          (WS)
          (ARROW)
          (WS)
          (type
            (typeReference
              (userType
                (simpleUserType
                  (simpleIdentifier
                    (Identifier)))))
            (quest
              (QUEST_WS))))))
    (WS)
    (expression
      (disjunction
        (conjunction
          (equality
            (comparison
              (infixOperation
                (elvisExpression
                  (infixFunctionCall
                    (rangeExpression
                      (additiveExpression
                        (multiplicativeExpression
                          (asExpression
                            (prefixUnaryExpression
                              (postfixUnaryExpression
                                (primaryExpression
                                  (callableReference
                                    (receiverType
                                      (typeReference
                                        (userType
                                          (userTypeWithDot
                                            (userType
                                              (userTypeWithDot
                                                (userType
                                                  (simpleUserType
                                                    (simpleIdentifier
                                                      (Identifier))))
                                                (DOT))
                                              (simpleUserType
                                                (simpleIdentifier
                                                  (Identifier))
                                                (typeArguments
                                                  (LANGLE)
                                                  (typeProjection
                                                    (type
                                                      (typeReference
                                                        (userType
                                                          (simpleUserType
                                                            (simpleIdentifier
                                                              (Identifier)))))))
                                                  (RANGLE))))
                                            (DOT))
                                          (simpleUserType
                                            (simpleIdentifier
                                              (Identifier))))))
                                    (COLONCOLON)
                                    (simpleIdentifier
                                      (Identifier))))))))))))))))))))
